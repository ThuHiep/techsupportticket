{
    "sourceFile": "app/Http/Controllers/login/AuthController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1736136504237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736136548895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,386 @@\n+<?php\n+\n+namespace App\\Http\\Controllers\\login;\n+\n+use App\\Http\\Controllers\\Controller;\n+use App\\Mail\\AccountApproved;\n+use App\\Mail\\CustomerCreated;\n+use App\\Mail\\Register;\n+use App\\Mail\\VerifyEmail;\n+use App\\Models\\Customer;\n+use App\\Models\\Employee;\n+use App\\Models\\SwitchedUser;\n+use App\\Models\\User;\n+use Carbon\\Carbon;\n+use Illuminate\\Support\\Str;\n+use Illuminate\\Http\\Request;\n+use Illuminate\\Support\\Facades\\Auth;\n+use Illuminate\\Support\\Facades\\Cookie;\n+use Illuminate\\Support\\Facades\\Session;\n+use Illuminate\\Support\\Facades\\Hash;\n+use Illuminate\\Support\\Facades\\Http;\n+use Illuminate\\Support\\Facades\\Mail;\n+\n+class AuthController extends Controller\n+{\n+    public function login()\n+    {\n+        if (Auth::check()) {\n+            Session::flush();\n+            Auth::logout();\n+        }\n+        return view('login.login');\n+    }\n+    public function loginProcess(Request $request)\n+    {\n+        $request->validate([\n+            'username' => 'required',\n+            'password' => 'required',\n+            'g-recaptcha-response' => 'required', // Ensure reCaptcha is filled\n+        ]);\n+\n+        // Kiểm tra reCAPTCHA\n+        $secretKey = env('NOCAPTCHA_SECRET');\n+        $responseKey = $request->input('g-recaptcha-response');\n+\n+        // Gửi yêu cầu xác thực reCAPTCHA\n+        $response = Http::asForm()->post('https://www.google.com/recaptcha/api/siteverify', [\n+            'secret' => $secretKey,\n+            'response' => $responseKey,\n+            'remoteip' => $request->ip(),\n+        ]);\n+\n+        $responseBody = $response->json();\n+        // Kiểm tra kết quả xác thực reCAPTCHA\n+        if (!$responseBody['success']) {\n+            return back()->withErrors(['captcha' => 'Vui lòng xác minh CAPTCHA!']);\n+        }\n+\n+        $maxAttempts = 5; // Số lần thử tối đa\n+        $lockoutTime = 30; // Thời gian khóa (giây)\n+        $attempts = session('login_attempts', 0); // Số lần thử hiện tại\n+        $lastAttemptTime = session('last_attempt_time', now()->toIsoString()); // Lần thử cuối cùng\n+\n+        // Kiểm tra nếu người dùng đã bị khóa\n+        if ($attempts >= $maxAttempts) {\n+            $timeElapsed = abs(now()->diffInSeconds($lastAttemptTime));\n+\n+            if (!($timeElapsed < $lockoutTime)) {\n+                // Nếu hết thời gian khóa, reset lại số lần thử và thời gian\n+                session()->forget(['login_attempts', 'last_attempt_time', 'remaining_time']);\n+                $attempts = 0;\n+            }\n+        }\n+\n+        // Kiểm tra đăng nhập\n+        if (Auth::attempt($request->only('username', 'password'))) {\n+            $request->session()->regenerate();\n+\n+            // Xóa số lần thử khi đăng nhập thành công\n+            session()->forget(['login_attempts', 'last_attempt_time', 'remaining_time']);\n+\n+            if (isset($request['remember']) && !empty($request['remember'])) {\n+                setcookie(\"username\", $request['username'], time() + 3600);\n+                setcookie(\"password\", $request['password'], time() + 3600);\n+            } else {\n+                setcookie(\"username\", \"\");\n+                setcookie(\"password\", \"\");\n+            }\n+\n+            //Phân quyền người dùng\n+            $user = Auth::user();\n+\n+            if ($user->status === null) {\n+                Auth::logout();\n+                return back()->with('error', 'Tài khoản của bạn chưa được kích hoạt.');\n+            }\n+\n+            if ($user->role_id == 1 || $user->role_id == 2) {\n+                $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+                return redirect()->route('dashboard.index')->with('success', \"Chào mừng {$logged_user->full_name} đến với trang quản trị\");\n+            } elseif ($user->role_id == 3) {\n+                // Lấy thông tin tài khoản từ cookie, nếu có\n+                $accounts = Cookie::get('accounts', []);\n+\n+                // Nếu tài khoản là chuỗi, giải mã JSON, nếu không thì $accounts đã là mảng\n+                $accounts = is_string($accounts) ? json_decode($accounts, true) : $accounts;\n+\n+                // Nếu không có tài khoản trong cookie, khởi tạo mảng rỗng\n+                $accounts = $accounts ?: [];\n+\n+                // Lấy thông tin tài khoản hiện tại của người dùng đăng nhập\n+                $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+\n+                // Kiểm tra tài khoản đã có trong cookie chưa\n+                $existingAccount = collect($accounts)->firstWhere('username', $request->username);\n+\n+                // Nếu tài khoản chưa có trong cookie, thêm vào cookie\n+                if (!$existingAccount) {\n+                    $account = [\n+                        'customer_id' => $logged_user->customer_id,\n+                        'full_name' => $logged_user->full_name,\n+                        'profile_image' => $logged_user->profile_image,\n+                        'username' => $request->username,\n+                    ];\n+\n+                    // Nếu có chọn \"Remember me\", lưu thêm password\n+                    if ($request->remember) {\n+                        $account['password'] = $request->password;\n+                    }\n+\n+                    // Thêm tài khoản vào danh sách tài khoản trong cookie\n+                    $accounts[] = $account;\n+\n+                    // Cập nhật cookie\n+                    Cookie::queue('accounts', json_encode($accounts), 60 * 24 * 30);  // Lưu trong 30 ngày\n+                } else {\n+                    // Nếu tài khoản đã có trong cookie và có chọn \"Remember me\", lưu thêm password vào cookie\n+                    if ($request->remember) {\n+                        // Tìm và cập nhật mật khẩu của tài khoản trong mảng\n+                        foreach ($accounts as &$account) {\n+                            if ($account['username'] === $request->username) {\n+                                $account['password'] = $request->password;\n+                                break;\n+                            }\n+                        }\n+                    }\n+                    Cookie::queue('accounts', json_encode($accounts), 60 * 24 * 30);  // Lưu trong 30 ngày\n+                }\n+\n+                // Trả về trang chủ sau khi đăng nhập thành công\n+                return redirect()->route('indexAccount')->with('success', \"Chào mừng {$logged_user->full_name} đến với trang khách hàng\");\n+            } else {\n+                return back()->with('error', 'Không tìm thấy vai trò của bạn.')->withInput();\n+            }\n+        }\n+\n+        // Xử lý nếu đăng nhập sai\n+        $attempts++;\n+        session([\n+            'login_attempts' => $attempts,\n+            'last_attempt_time' => now()->toIsoString()\n+        ]);\n+\n+        $remainingAttempts = $maxAttempts - $attempts;\n+\n+        if ($remainingAttempts > 0) {\n+            return back()->with('error', \"Tên đăng nhập hoặc mật khẩu không đúng. Bạn còn $remainingAttempts lần thử.\")->withInput();\n+        } else {\n+            session(['remaining_time' => $lockoutTime]);\n+            return back()->with('error', \"Bạn đã nhập sai quá nhiều lần. Vui lòng thử lại sau $lockoutTime giây.\")->withInput();\n+        }\n+    }\n+    public function Logout(Request $request)\n+    {\n+        Session::flush();\n+        Auth::logout();\n+        return redirect()->route('login');\n+    }\n+    //Đăng kí tài khoản customer\n+    public function register()\n+    {\n+        return view('login.register');\n+    }\n+    // Xử lý form đăng kí tài khoản\n+    public function registerProcess(Request $request)\n+    {\n+        $request->validate([\n+            'username' => 'required|unique:user,username',\n+            'email' => 'required|email|unique:customer,email',\n+        ], [\n+            'required' => ':attribute là bắt buộc.',\n+            'username.unique' => 'Tên đăng nhập đã tồn tại.',\n+            'email.unique' => 'Email đã tồn tại.',\n+            'email.email' => 'Email không hợp lệ.',\n+        ]);\n+\n+        // Tạo ID ngẫu nhiên cho người dùng theo định dạng NDxxxxxxx\n+        $randUserID = (string)Str::uuid();\n+\n+        // Tạo tài khoản người dùng\n+        $user = new User();\n+        $user->user_id = $randUserID;\n+        $user->username = $request->username;\n+        $user->password = bcrypt($request->password);\n+        $user->role_id = 3;\n+        $user->save();\n+\n+        // Tạo ID ngẫu nhiên cho khách hàng\n+        $randomId = (string) Str::uuid();\n+\n+        // Tạo khách hàng\n+        $customer = new Customer();\n+        $customer->customer_id = $randomId;\n+        $customer->user_id = $randUserID;\n+        $customer->full_name = $request['full_name'];\n+        $customer->date_of_birth = $request['date_of_birth'] ?? null;\n+        $customer->gender = $request['gender'] ?? null;\n+        $customer->phone = $request['phone'] ?? null;\n+        $customer->address = $request['address'] ?? null;\n+        $customer->email = $request['email'] ?? null;\n+        $customer->company = $request['company'] ?? null;\n+        $customer->create_at = now();\n+        $customer->update_at = now();\n+        $customer->save();\n+        // Check if email is available\n+        if (!empty($customer->email)) {\n+            // Send notification email\n+            Mail::to($customer->email)->send(new Register($customer));\n+        } else {\n+            return redirect()->route('login')->with('error', 'Email không hợp lệ.');\n+        }\n+\n+        return redirect()->route('homepage.index')->with('success', 'Đăng ký thành công! Hãy chờ kích hoạt tài khoản.');\n+    }\n+    // Quên mật khẩu\n+    public function forgotPass()\n+    {\n+        return view('login.forgot_pass');\n+    }\n+    // Xử lý form quên mật khẩu\n+    // Xử lý form quên mật khẩu\n+    public function forgotPassProcess(Request $request)\n+    {\n+        $request->validate([\n+            'email' => 'required|email',\n+        ]);\n+\n+        $email = $request->input('email');\n+\n+        $user = Customer::with('user')->where('email', $email)->first()\n+            ?? Employee::with('user')->where('email', $email)->first();\n+\n+        if ($user) {\n+            // Xóa dữ liệu OTP cũ nếu có\n+            $user->user->otp = null;\n+            $user->user->otp_expiration_time = null;\n+            $user->user->save();\n+\n+            $randomOtp = str_pad(mt_rand(1, 999999), 6, '0', STR_PAD_LEFT);\n+            $user->user->otp = $randomOtp;\n+            $user->user->otp_expiration_time = Carbon::now('Asia/Ho_Chi_Minh')->addMinutes(5)->toDateTimeString();\n+            $user->user->save();\n+\n+            // Gửi email thông báo\n+            Mail::to($email)->send(new VerifyEmail($user, $randomOtp));\n+\n+            // Xóa countdown trong localStorage\n+            echo \"<script>localStorage.removeItem('otpCountdown');</script>\";\n+\n+            // Chuyển hướng đến trang xác thực OTP\n+            return redirect()->route('verifyOTP', $user->user->user_id);\n+        }\n+\n+        // Nếu email không tồn tại trong bảng nào\n+        return back()->with('error', 'Email không đúng/không tồn tại.');\n+    }\n+\n+    // Xác nhận otp gửi về email\n+    public function verifyOTP($user_id)\n+    {\n+        return view('login.verify_otp', compact('user_id'));\n+    }\n+    public function resendOtp($user_id)\n+    {\n+        $user = User::findOrFail($user_id);\n+\n+        // Tạo mã OTP mới\n+        $randomOtp = str_pad(mt_rand(1, 999999), 6, '0', STR_PAD_LEFT);\n+        $user->otp = $randomOtp;\n+        $user->otp_expiration_time = Carbon::now('Asia/Ho_Chi_Minh')->addMinutes(5)->toDateTimeString();\n+        $user->save();\n+\n+        // Gửi email thông báo\n+        Mail::to($user->email)->send(new VerifyEmail($user, $randomOtp));\n+\n+        return response()->json(['success' => true, 'message' => 'Mã OTP đã được gửi lại.']);\n+    }\n+\n+    // Xử lý form xác nhận otp\n+    public function verifyOTPProcess(Request $request, $user_id)\n+    {\n+        $request->validate([\n+            'otp' => 'required|digits:6',\n+        ]);\n+\n+        $otp = $request->input('otp');\n+        $user = User::findOrFail($user_id);\n+\n+        // Check OTP expiration\n+        $otpExpirationTime = Carbon::parse($user->otp_expiration_time)->addMinutes(1);\n+        if (Carbon::now('Asia/Ho_Chi_Minh')->greaterThan($otpExpirationTime)) {\n+            // Clear the OTP and expiration time\n+            $user->otp = null;\n+            $user->otp_expiration_time = null;\n+            $user->save();\n+\n+            return back()->with('otp', 'Mã OTP đã hết hiệu lực.');\n+        }\n+\n+        // Verify OTP\n+        if ($user->otp != $otp) {\n+            return back()->with('otp', 'Mã OTP không chính xác.');\n+        }\n+\n+        // Clear OTP after successful verification\n+        $user->otp = null;\n+        $user->otp_expiration_time = null;\n+        $user->save();\n+\n+        // Redirect to password change page\n+        return redirect()->route('changePass', $user->user_id);\n+    }\n+    // Phương thức trong controller\n+    public function deleteOtp(Request $request, $user_id)\n+    {\n+        $user = User::findOrFail($user_id);\n+        $user->otp = null;\n+        $user->otp_expiration_time = null;\n+        $user->save();\n+\n+        return response()->json(['success' => true]);\n+    }\n+\n+    public function changePass($user_id)\n+    {\n+        return view('login.change_pass', compact('user_id'));\n+    }\n+    public function updatePass(Request $request, $user_id)\n+    {\n+        $user = User::findOrFail($user_id);\n+\n+        $user->password = Hash::make($request->input('new-password'));\n+        $user->update_at = now();\n+        $user->save();\n+\n+        return redirect()->route('login')->with('success', 'Mật khẩu đã được thay đổi thành công!');\n+    }\n+    // Thay đổi mật khẩu từ email\n+    public function changePassEmail($user_id)\n+    {\n+        return view('login.change_pass_email', compact('user_id'));\n+    }\n+    public function updatePassEmail(Request $request, $user_id)\n+    {\n+        $user = User::findOrFail($user_id);\n+\n+        if (!Hash::check($request->input('old-password'), $user->password)) {\n+            return back()->withErrors(['old-password' => 'Mật khẩu cũ không đúng!'])->withInput();\n+        }\n+\n+        $user->password = Hash::make($request->input('new-password'));\n+        $user->update_at = now();\n+        $user->save();\n+\n+        return redirect()->route('login')->with('success', 'Mật khẩu đã được thay đổi thành công!');\n+    }\n+\n+    // Ví dụ trong Laravel\n+    public function checkEmail(Request $request)\n+    {\n+        $email = $request->input('email');\n+        $exists = Customer::where('email', $email)->exists();\n+\n+        return response()->json(['exists' => $exists]);\n+    }\n+}\n"
                },
                {
                    "date": 1736138247039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,24 +279,32 @@\n     public function verifyOTP($user_id)\n     {\n         return view('login.verify_otp', compact('user_id'));\n     }\n-    public function resendOtp($user_id)\n-    {\n-        $user = User::findOrFail($user_id);\n+    public function resendOtp(Request $request, $user_id)\n+{\n+    $user = User::find($user_id);\n \n-        // Tạo mã OTP mới\n-        $randomOtp = str_pad(mt_rand(1, 999999), 6, '0', STR_PAD_LEFT);\n-        $user->otp = $randomOtp;\n-        $user->otp_expiration_time = Carbon::now('Asia/Ho_Chi_Minh')->addMinutes(5)->toDateTimeString();\n-        $user->save();\n+    if (!$user) {\n+        return response()->json(['error' => 'User not found.'], 404);\n+    }\n \n-        // Gửi email thông báo\n+    // Tạo mã OTP mới\n+    $randomOtp = str_pad(mt_rand(1, 999999), 6, '0', STR_PAD_LEFT);\n+    $user->otp = $randomOtp;\n+    $user->otp_expiration_time = Carbon::now('Asia/Ho_Chi_Minh')->addMinutes(5);\n+    $user->save();\n+\n+    // Gửi email thông báo\n+    try {\n         Mail::to($user->email)->send(new VerifyEmail($user, $randomOtp));\n-\n         return response()->json(['success' => true, 'message' => 'Mã OTP đã được gửi lại.']);\n+    } catch (\\Exception $e) {\n+        return response()->json(['error' => 'Unable to send email.', 'details' => $e->getMessage()], 500);\n     }\n+}\n \n+\n     // Xử lý form xác nhận otp\n     public function verifyOTPProcess(Request $request, $user_id)\n     {\n         $request->validate([\n"
                },
                {
                    "date": 1736138732489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,9 +267,9 @@\n             // Xóa countdown trong localStorage\n             echo \"<script>localStorage.removeItem('otpCountdown');</script>\";\n \n             // Chuyển hướng đến trang xác thực OTP\n-            return redirect()->route('verifyOTP', $user->user->user_id);\n+            return redirect()->route('verifyOTP', $user->user->user_id,$email);\n         }\n \n         // Nếu email không tồn tại trong bảng nào\n         return back()->with('error', 'Email không đúng/không tồn tại.');\n"
                },
                {
                    "date": 1736138750491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,9 +267,9 @@\n             // Xóa countdown trong localStorage\n             echo \"<script>localStorage.removeItem('otpCountdown');</script>\";\n \n             // Chuyển hướng đến trang xác thực OTP\n-            return redirect()->route('verifyOTP', $user->user->user_id, $email);\n+            return redirect()->route('verifyOTP', $user->user->user_id);\n         }\n \n         // Nếu email không tồn tại trong bảng nào\n         return back()->with('error', 'Email không đúng/không tồn tại.');\n"
                },
                {
                    "date": 1736138775817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,9 +282,10 @@\n     }\n     public function resendOtp(Request $request, $user_id)\n     {\n         $user = User::find($user_id);\n-\n+        $user = Customer::with('user')->where('email', $email)->first()\n+            ?? Employee::with('user')->where('email', $email)->first();\n         if (!$user) {\n             return response()->json(['error' => 'User not found.'], 404);\n         }\n \n"
                }
            ],
            "date": 1736136504237,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\login;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Mail\\AccountApproved;\nuse App\\Mail\\CustomerCreated;\nuse App\\Mail\\Register;\nuse App\\Mail\\VerifyEmail;\nuse App\\Models\\Customer;\nuse App\\Models\\Employee;\nuse App\\Models\\SwitchedUser;\nuse App\\Models\\User;\nuse Carbon\\Carbon;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Cookie;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Mail;\n\nclass AuthController extends Controller\n{\n    public function login()\n    {\n        if (Auth::check()) {\n            Session::flush();\n            Auth::logout();\n        }\n        return view('login.login');\n    }\n    public function loginProcess(Request $request)\n    {\n        $request->validate([\n            'username' => 'required',\n            'password' => 'required',\n            'g-recaptcha-response' => 'required', // Ensure reCaptcha is filled\n        ]);\n\n        // Kiểm tra reCAPTCHA\n        $secretKey = env('NOCAPTCHA_SECRET');\n        $responseKey = $request->input('g-recaptcha-response');\n\n        // Gửi yêu cầu xác thực reCAPTCHA\n        $response = Http::asForm()->post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => $secretKey,\n            'response' => $responseKey,\n            'remoteip' => $request->ip(),\n        ]);\n\n        $responseBody = $response->json();\n        // Kiểm tra kết quả xác thực reCAPTCHA\n        if (!$responseBody['success']) {\n            return back()->withErrors(['captcha' => 'Vui lòng xác minh CAPTCHA!']);\n        }\n\n        $maxAttempts = 5; // Số lần thử tối đa\n        $lockoutTime = 30; // Thời gian khóa (giây)\n        $attempts = session('login_attempts', 0); // Số lần thử hiện tại\n        $lastAttemptTime = session('last_attempt_time', now()->toIsoString()); // Lần thử cuối cùng\n\n        // Kiểm tra nếu người dùng đã bị khóa\n        if ($attempts >= $maxAttempts) {\n            $timeElapsed = abs(now()->diffInSeconds($lastAttemptTime));\n\n            if (!($timeElapsed < $lockoutTime)) {\n                // Nếu hết thời gian khóa, reset lại số lần thử và thời gian\n                session()->forget(['login_attempts', 'last_attempt_time', 'remaining_time']);\n                $attempts = 0;\n            }\n        }\n\n        // Kiểm tra đăng nhập\n        if (Auth::attempt($request->only('username', 'password'))) {\n            $request->session()->regenerate();\n\n            // Xóa số lần thử khi đăng nhập thành công\n            session()->forget(['login_attempts', 'last_attempt_time', 'remaining_time']);\n\n            if (isset($request['remember']) && !empty($request['remember'])) {\n                setcookie(\"username\", $request['username'], time() + 3600);\n                setcookie(\"password\", $request['password'], time() + 3600);\n            } else {\n                setcookie(\"username\", \"\");\n                setcookie(\"password\", \"\");\n            }\n\n            //Phân quyền người dùng\n            $user = Auth::user();\n\n            if ($user->status === null) {\n                Auth::logout();\n                return back()->with('error', 'Tài khoản của bạn chưa được kích hoạt.');\n            }\n\n            if ($user->role_id == 1 || $user->role_id == 2) {\n                $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n                return redirect()->route('dashboard.index')->with('success', \"Chào mừng {$logged_user->full_name} đến với trang quản trị\");\n            } elseif ($user->role_id == 3) {\n                // Lấy thông tin tài khoản từ cookie, nếu có\n                $accounts = Cookie::get('accounts', []);\n\n                // Nếu tài khoản là chuỗi, giải mã JSON, nếu không thì $accounts đã là mảng\n                $accounts = is_string($accounts) ? json_decode($accounts, true) : $accounts;\n\n                // Nếu không có tài khoản trong cookie, khởi tạo mảng rỗng\n                $accounts = $accounts ?: [];\n\n                // Lấy thông tin tài khoản hiện tại của người dùng đăng nhập\n                $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n                // Kiểm tra tài khoản đã có trong cookie chưa\n                $existingAccount = collect($accounts)->firstWhere('username', $request->username);\n\n                // Nếu tài khoản chưa có trong cookie, thêm vào cookie\n                if (!$existingAccount) {\n                    $account = [\n                        'customer_id' => $logged_user->customer_id,\n                        'full_name' => $logged_user->full_name,\n                        'profile_image' => $logged_user->profile_image,\n                        'username' => $request->username,\n                    ];\n\n                    // Nếu có chọn \"Remember me\", lưu thêm password\n                    if ($request->remember) {\n                        $account['password'] = $request->password;\n                    }\n\n                    // Thêm tài khoản vào danh sách tài khoản trong cookie\n                    $accounts[] = $account;\n\n                    // Cập nhật cookie\n                    Cookie::queue('accounts', json_encode($accounts), 60 * 24 * 30);  // Lưu trong 30 ngày\n                } else {\n                    // Nếu tài khoản đã có trong cookie và có chọn \"Remember me\", lưu thêm password vào cookie\n                    if ($request->remember) {\n                        // Tìm và cập nhật mật khẩu của tài khoản trong mảng\n                        foreach ($accounts as &$account) {\n                            if ($account['username'] === $request->username) {\n                                $account['password'] = $request->password;\n                                break;\n                            }\n                        }\n                    }\n                    Cookie::queue('accounts', json_encode($accounts), 60 * 24 * 30);  // Lưu trong 30 ngày\n                }\n\n                // Trả về trang chủ sau khi đăng nhập thành công\n                return redirect()->route('indexAccount')->with('success', \"Chào mừng {$logged_user->full_name} đến với trang khách hàng\");\n            } else {\n                return back()->with('error', 'Không tìm thấy vai trò của bạn.')->withInput();\n            }\n        }\n\n        // Xử lý nếu đăng nhập sai\n        $attempts++;\n        session([\n            'login_attempts' => $attempts,\n            'last_attempt_time' => now()->toIsoString()\n        ]);\n\n        $remainingAttempts = $maxAttempts - $attempts;\n\n        if ($remainingAttempts > 0) {\n            return back()->with('error', \"Tên đăng nhập hoặc mật khẩu không đúng. Bạn còn $remainingAttempts lần thử.\")->withInput();\n        } else {\n            session(['remaining_time' => $lockoutTime]);\n            return back()->with('error', \"Bạn đã nhập sai quá nhiều lần. Vui lòng thử lại sau $lockoutTime giây.\")->withInput();\n        }\n    }\n    public function Logout(Request $request)\n    {\n        Session::flush();\n        Auth::logout();\n        return redirect()->route('login');\n    }\n    //Đăng kí tài khoản customer\n    public function register()\n    {\n        return view('login.register');\n    }\n    // Xử lý form đăng kí tài khoản\n    public function registerProcess(Request $request)\n    {\n        $request->validate([\n            'username' => 'required|unique:user,username',\n            'email' => 'required|email|unique:customer,email',\n        ], [\n            'required' => ':attribute là bắt buộc.',\n            'username.unique' => 'Tên đăng nhập đã tồn tại.',\n            'email.unique' => 'Email đã tồn tại.',\n            'email.email' => 'Email không hợp lệ.',\n        ]);\n\n        // Tạo ID ngẫu nhiên cho người dùng theo định dạng NDxxxxxxx\n        $randUserID = (string)Str::uuid();\n\n        // Tạo tài khoản người dùng\n        $user = new User();\n        $user->user_id = $randUserID;\n        $user->username = $request->username;\n        $user->password = bcrypt($request->password);\n        $user->role_id = 3;\n        $user->save();\n\n        // Tạo ID ngẫu nhiên cho khách hàng\n        $randomId = (string) Str::uuid();\n\n        // Tạo khách hàng\n        $customer = new Customer();\n        $customer->customer_id = $randomId;\n        $customer->user_id = $randUserID;\n        $customer->full_name = $request['full_name'];\n        $customer->date_of_birth = $request['date_of_birth'] ?? null;\n        $customer->gender = $request['gender'] ?? null;\n        $customer->phone = $request['phone'] ?? null;\n        $customer->address = $request['address'] ?? null;\n        $customer->email = $request['email'] ?? null;\n        $customer->company = $request['company'] ?? null;\n        $customer->create_at = now();\n        $customer->update_at = now();\n        $customer->save();\n        // Check if email is available\n        if (!empty($customer->email)) {\n            // Send notification email\n            Mail::to($customer->email)->send(new Register($customer));\n        } else {\n            return redirect()->route('login')->with('error', 'Email không hợp lệ.');\n        }\n\n        return redirect()->route('homepage.index')->with('success', 'Đăng ký thành công! Hãy chờ kích hoạt tài khoản.');\n    }\n    // Quên mật khẩu\n    public function forgotPass()\n    {\n        return view('login.forgot_pass');\n    }\n    // Xử lý form quên mật khẩu\n    // Xử lý form quên mật khẩu\n    public function forgotPassProcess(Request $request)\n    {\n        $request->validate([\n            'email' => 'required|email',\n        ]);\n\n        $email = $request->input('email');\n\n        $user = Customer::with('user')->where('email', $email)->first()\n            ?? Employee::with('user')->where('email', $email)->first();\n\n        if ($user) {\n            // Xóa dữ liệu OTP cũ nếu có\n            $user->user->otp = null;\n            $user->user->otp_expiration_time = null;\n            $user->user->save();\n\n            $randomOtp = str_pad(mt_rand(1, 999999), 6, '0', STR_PAD_LEFT);\n            $user->user->otp = $randomOtp;\n            $user->user->otp_expiration_time = Carbon::now('Asia/Ho_Chi_Minh')->addMinutes(5)->toDateTimeString();\n            $user->user->save();\n\n            // Gửi email thông báo\n            Mail::to($email)->send(new VerifyEmail($user, $randomOtp));\n\n            // Xóa countdown trong localStorage\n            echo \"<script>localStorage.removeItem('otpCountdown');</script>\";\n\n            // Chuyển hướng đến trang xác thực OTP\n            return redirect()->route('verifyOTP', $user->user->user_id);\n        }\n\n        // Nếu email không tồn tại trong bảng nào\n        return back()->with('error', 'Email không đúng/không tồn tại.');\n    }\n\n    // Xác nhận otp gửi về email\n    public function verifyOTP($user_id)\n    {\n        return view('login.verify_otp', compact('user_id'));\n    }\n    public function resendOtp(Request $request, $user_id)\n{\n    $user = User::findOrFail($user_id);\n\n    // Tạo mã OTP mới\n    $randomOtp = str_pad(mt_rand(1, 999999), 6, '0', STR_PAD_LEFT);\n    $user->otp = $randomOtp;\n    $user->otp_expiration_time = Carbon::now('Asia/Ho_Chi_Minh')->addMinutes(5)->toDateTimeString();\n    $user->save();\n\n    // Gửi email thông báo\n    Mail::to($user->email)->send(new VerifyEmail($user, $randomOtp));\n\n    return response()->json(['success' => true, 'message' => 'Mã OTP đã được gửi lại.']);\n}\n\n    // Xử lý form xác nhận otp\n    public function verifyOTPProcess(Request $request, $user_id)\n    {\n        $request->validate([\n            'otp' => 'required|digits:6',\n        ]);\n\n        $otp = $request->input('otp');\n        $user = User::findOrFail($user_id);\n\n        // Check OTP expiration\n        $otpExpirationTime = Carbon::parse($user->otp_expiration_time)->addMinutes(1);\n        if (Carbon::now('Asia/Ho_Chi_Minh')->greaterThan($otpExpirationTime)) {\n            // Clear the OTP and expiration time\n            $user->otp = null;\n            $user->otp_expiration_time = null;\n            $user->save();\n\n            return back()->with('otp', 'Mã OTP đã hết hiệu lực.');\n        }\n\n        // Verify OTP\n        if ($user->otp != $otp) {\n            return back()->with('otp', 'Mã OTP không chính xác.');\n        }\n\n        // Clear OTP after successful verification\n        $user->otp = null;\n        $user->otp_expiration_time = null;\n        $user->save();\n\n        // Redirect to password change page\n        return redirect()->route('changePass', $user->user_id);\n    }\n    // Phương thức trong controller\n    public function deleteOtp(Request $request, $user_id)\n    {\n        $user = User::findOrFail($user_id);\n        $user->otp = null;\n        $user->otp_expiration_time = null;\n        $user->save();\n\n        return response()->json(['success' => true]);\n    }\n\n    public function changePass($user_id)\n    {\n        return view('login.change_pass', compact('user_id'));\n    }\n    public function updatePass(Request $request, $user_id)\n    {\n        $user = User::findOrFail($user_id);\n\n        $user->password = Hash::make($request->input('new-password'));\n        $user->update_at = now();\n        $user->save();\n\n        return redirect()->route('login')->with('success', 'Mật khẩu đã được thay đổi thành công!');\n    }\n    // Thay đổi mật khẩu từ email\n    public function changePassEmail($user_id)\n    {\n        return view('login.change_pass_email', compact('user_id'));\n    }\n    public function updatePassEmail(Request $request, $user_id)\n    {\n        $user = User::findOrFail($user_id);\n\n        if (!Hash::check($request->input('old-password'), $user->password)) {\n            return back()->withErrors(['old-password' => 'Mật khẩu cũ không đúng!'])->withInput();\n        }\n\n        $user->password = Hash::make($request->input('new-password'));\n        $user->update_at = now();\n        $user->save();\n\n        return redirect()->route('login')->with('success', 'Mật khẩu đã được thay đổi thành công!');\n    }\n\n    // Ví dụ trong Laravel\n    public function checkEmail(Request $request) {\n        $email = $request->input('email');\n        $exists = Customer::where('email', $email)->exists();\n\n        return response()->json(['exists' => $exists]);\n    }\n}\n"
        }
    ]
}