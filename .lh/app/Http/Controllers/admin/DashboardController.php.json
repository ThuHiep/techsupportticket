{
    "sourceFile": "app/Http/Controllers/admin/DashboardController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736264703373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736264703373,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Customer; // Import Model Customer\nuse App\\Models\\Department;\nuse App\\Models\\Employee;\nuse App\\Models\\Request;\nuse App\\Models\\Request as SupportRequest; // Import Model Request\nuse App\\Models\\RequestType;\nuse App\\Http\\Controllers\\admin\\RequestController;\nuse App\\Models\\User; // Import Model User\nuse App\\Models\\FAQ; // Import Model User\nuse Carbon\\Carbon;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass DashboardController extends Controller\n{\n    public function __construct()\n    {\n        // Constructor logic\n    }\n    public function index()\n    {\n        $template = 'admin.dashboard.home.index';\n        $logged_user = Employee::with('user')->where('user_id', Auth::user()->user_id)->first();\n\n        // Lấy loại yêu cầu từ cơ sở dữ liệu với số lượng yêu cầu\n        $requestTypes = RequestType::withCount('requests')->get();\n\n        // Lấy phòng ban từ cơ sở dữ liệu\n        $departments = Department::withCount('requests')->get();\n\n        // Truy vấn để lấy số liệu yêu cầu theo ngày và trạng thái\n        $query = DB::table('request')\n            ->select(DB::raw('DAY(create_at) as day'), 'request_type_id', 'status', DB::raw('COUNT(request_id) as count'))\n            ->groupBy(DB::raw('DAY(create_at), request_type_id, status'));\n\n        $data = $query->get()->groupBy('request_type_id');\n\n        // Initialize an array to hold request type data\n        $requestTypeData = [];\n\n        foreach ($requestTypes as $requestType) {\n            $requestCounts = DB::table('request')\n                ->select('status', DB::raw('count(*) as count'))\n                ->where('request_type_id', $requestType->request_type_id)\n                ->groupBy('status')\n                ->get()\n                ->pluck('count', 'status')\n                ->toArray();\n\n            $requestTypeData[$requestType->request_type_name] = [\n                'Đang xử lý' => $requestCounts['Đang xử lý'] ?? 0,\n                'Chưa xử lý' => $requestCounts['Chưa xử lý'] ?? 0,\n                'Hoàn thành' => $requestCounts['Hoàn thành'] ?? 0,\n                'Đã hủy' => $requestCounts['Đã hủy'] ?? 0,\n            ];\n        }\n        //dd($requestTypeData);\n        // Lấy danh sách khách hàng\n        $activeCustomers = Customer::where('status', 'active')\n            ->withCount('requests') // Đếm số lượng yêu cầu\n            ->get(['customer_id', 'full_name']);\n\n        function generateColors($numColors) {\n            $colors = [];\n            for ($i = 0; $i < $numColors; $i++) {\n                $colors[] = sprintf('#%06X', mt_rand(0, 0xFFFFFF));\n            }\n            return $colors;\n        }\n        // Màu sắc của các khách hàng\n        $customerColors = generateColors(5000); // Thay đổi số lượng theo nhu cầu\n\n        // Tạo màu sắc cho phòng ban\n        $departmentColors = [];\n        foreach ($departments as $index => $department) {\n            $departmentColors[$department->department_name] = $customerColors[$index % count($customerColors)];\n        }\n\n        // Initialize an array to hold department data\n        $departmentData = [];\n\n        // Loop through each department to gather request statistics\n        foreach ($departments as $department) {\n\n            $requestCounts = DB::table('request')\n                ->select('status', DB::raw('count(*) as count'))\n                ->where('department_id', $department->department_id)\n                ->groupBy('status')\n                ->get()\n                ->pluck('count', 'status')\n                ->toArray();\n\n            $departmentData[$department->department_name] = [\n                'Đang xử lý' => $requestCounts['Đang xử lý'] ?? 0,\n                'Chưa xử lý' => $requestCounts['Chưa xử lý'] ?? 0,\n                'Hoàn thành' => $requestCounts['Hoàn thành'] ?? 0,\n                'Đã hủy' => $requestCounts['Đã hủy'] ?? 0,\n            ];\n        }\n        //dd($departmentData);\n\n        // Time-based statistics\n        $timeData = $this->getTimeBasedStatistics();\n        //dd($timeData);\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        // Trả về view với dữ liệu đã xử lý\n        return view('admin.dashboard.layout', compact(\n            'data',\n            'template',\n            'requestTypes',\n            'logged_user',\n            'activeCustomers',\n            'customerColors',\n            'departments',\n            'departmentColors',\n            'departmentData',\n            'requestTypeData', // Gửi dữ liệu trạng thái theo loại yêu cầu\n            'timeData',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n\n\n    public function getRequests(\\Illuminate\\Http\\Request $request)\n    {\n        $query = DB::table('request')\n            ->select(DB::raw('DAY(create_at) as day'), 'request_type_name', DB::raw('COUNT(request_id) as count'))\n            ->groupBy(DB::raw('DAY(create_at), request_type_name'));\n\n        $data = $query->get()->groupBy('request_type_name');\n\n        // Chuyển đổi dữ liệu thành định dạng mong muốn\n        $response = [];\n        foreach ($data as $requestType => $items) {\n            $counts = array_fill(0, 31, 0);\n            foreach ($items as $item) {\n                $counts[$item->day - 1] = $item->count;\n            }\n            $response[] = [\n                'request_type_name' => $requestType,\n                'counts' => $counts\n            ];\n        }\n\n        return response()->json($response);\n    }\n\n    public function getRequestData(Request $request)\n    {\n        $period = $request->input('period');\n        $startDate = $request->input('startDate');\n        $endDate = $request->input('endDate');\n        $data = DB::table('request')\n            ->select('status', DB::raw('COUNT(*) as count'))\n            ->groupBy('status')\n            ->get();\n\n        // Kiểm tra xem startDate và endDate có được gửi hay không\n        if ($startDate && $endDate) {\n            // Nếu có, chuyển về định dạng Carbon để dễ dàng so sánh\n            $startDate = Carbon::parse($startDate);\n            $endDate = Carbon::parse($endDate);\n\n            // Lấy dữ liệu cho khoảng thời gian từ startDate đến endDate\n            while ($startDate <= $endDate) {\n                $date = $startDate->format('Y-m-d');\n                $data[$date] = $this->getRequestsCountByDate($date);\n                $startDate->addDay(); // Di chuyển tới ngày tiếp theo\n            }\n        } else {\n            // Nếu không có startDate và endDate, xử lý theo các khoảng thời gian 'today', 'monthly', 'yearly'\n            switch ($period) {\n                case 'today':\n                    // Lấy dữ liệu cho 7 ngày qua\n                    for ($i = 6; $i >= 0; $i--) {\n                        $date = Carbon::today()->subDays($i)->format('Y-m-d');\n                        $data[$date] = $this->getRequestsCountByDate($date);\n                    }\n                    break;\n\n                case 'monthly':\n                    // Lấy dữ liệu cho tháng hiện tại\n                    $month = Carbon::now()->format('Y-m');\n                    $data = $this->getRequestsCountByMonth($month);\n                    break;\n\n                case 'yearly':\n                    // Lấy dữ liệu cho 10 năm qua\n                    for ($i = 0; $i < 10; $i++) {\n                        $year = Carbon::now()->subYears($i)->format('Y');\n                        $data[$year] = $this->getRequestsCountByYear($year);\n                    }\n                    break;\n            }\n        }\n        return response()->json($data);\n    }\n\n\n    private function getRequestsCountByDate($date)\n    {\n        // Lấy số lượng yêu cầu từ bảng request cho một ngày cụ thể\n        return DB::table('request')\n            ->whereDate('create_at', $date) // Điều kiện lọc theo ngày\n            ->count(); // Đếm số lượng bản ghi\n    }\n\n    private function getRequestsCountByMonth($month)\n    {\n        // Phân tích tháng và năm từ chuỗi $months\n        $date = Carbon::createFromFormat('Y-m', $month);\n        $year = $date->year;\n        $month = $date->month;\n\n        // Lấy số ngày trong tháng\n        $daysInMonth = $date->daysInMonth;\n\n        // Lấy số lượng yêu cầu theo từng ngày trong tháng\n        $results = DB::table('request')\n            ->select(DB::raw('DAY(create_at) as day'), DB::raw('COUNT(request_id) as count'))\n            ->whereYear('create_at', $year)\n            ->whereMonth('create_at', $month)\n            ->groupBy(DB::raw('DAY(create_at)'))\n            ->get();\n\n        // Tạo mảng mặc định cho tất cả các ngày trong tháng (giá trị mặc định là 0)\n        $data = array_fill(1, $daysInMonth, 0);\n\n        // Gán dữ liệu đếm yêu cầu vào mảng\n        foreach ($results as $result) {\n            $data[$result->day] = $result->count;\n        }\n\n        return $data;\n    }\n\n    private function getRequestsCountByYear($year)\n    {\n        // Lấy số lượng yêu cầu từ bảng request cho năm cụ thể\n        return DB::table('request')\n            ->whereYear('create_at', $year) // Lọc theo năm\n            ->count(); // Đếm số lượng bản ghi\n    }\n\n\n    // Controller method to get departments\n    public function getDepartments(Request $request)\n    {\n        // Lấy tất cả các phòng ban\n        $departments = DB::table('department')->get();\n\n        $departmentData = [];\n\n        // Duyệt qua từng phòng ban để thu thập thống kê yêu cầu\n        foreach ($departments as $department) {\n            $requestCounts = DB::table('request')\n                ->select('status', DB::raw('count(*) as count'))\n                ->where('department_id', $department->department_id)\n                ->groupBy('status')\n                ->get()\n                ->pluck('count', 'status')\n                ->toArray();\n\n            // Kiểm tra kết quả truy vấn\n            //dd($requestCounts);\n\n            $departmentData[] = [\n                'department_id' => $department->department_id,\n                'department_name' => $department->department_name,\n                'status' => [\n                    'Đang xử lý' => $requestCounts['Đang xử lý'] ?? 0,\n                    'Chưa xử lý' => $requestCounts['Chưa xử lý'] ?? 0,\n                    'Hoàn thành' => $requestCounts['Hoàn thành'] ?? 0,\n                    'Đã hủy' => $requestCounts['Đã hủy'] ?? 0,\n                ],\n            ];\n        }\n\n        // Trả về dữ liệu phòng ban kèm thống kê dưới dạng JSON\n        return response()->json($departmentData);\n    }\n\n    // Controller method to get request types\n    public function getRequestTypes()\n    {\n        $requestTypes = DB::table('request_type')->select('request_type_id', 'request_type_name')->get();\n        return response()->json($requestTypes);\n    }\n\n\n    protected function getTimeBasedStatistics()\n    {\n        $timeData = [];\n        $timeData['Ngày'] = $this->getDailyStatistics();\n        $timeData['Tuần'] = $this->getWeeklyStatistics();\n        $timeData['Tháng'] = $this->getMonthlyStatistics();\n        $timeData['Năm'] = $this->getYearlyStatistics();\n        return $timeData;\n    }\n\n    private function getDailyStatistics()\n    {\n        $startDate = now()->startOfMonth();\n        $endDate = now()->endOfMonth();\n        $days = [];\n\n        for ($date = clone $startDate; $date <= $endDate; $date->addDay()) {\n            $days[$date->format('Y-m-d')] = [\n                'Đang xử lý' => 0,\n                'Chưa xử lý' => 0,\n                'Hoàn thành' => 0,\n                'Đã hủy' => 0,\n            ];\n        }\n\n        $dailyStats = DB::table('request')\n            ->select(DB::raw(\"DATE_FORMAT(create_at, '%Y-%m-%d') as period\"), 'status', DB::raw('count(*) as total'))\n            ->whereBetween('create_at', [$startDate, $endDate])\n            ->groupBy('period', 'status')\n            ->get();\n\n        // Kiểm tra kết quả của dailyStats\n        \\Log::info('Daily Stats:', $dailyStats->toArray());\n\n        foreach ($dailyStats as $stat) {\n            $days[$stat->period][$stat->status] = $stat->total;\n        }\n\n        return array_map(function ($totals, $period) {\n            return ['period' => $period, 'total' => $totals];\n        }, $days, array_keys($days));\n    }\n\n    private function getWeeklyStatistics()\n    {\n        $weeks = [];\n        $startDate = now()->startOfYear();\n        $endDate = now()->endOfYear();\n\n        // Tạo mảng tuần\n        for ($date = clone $startDate; $date <= $endDate; $date->addWeek()) {\n            $weeks[$date->format('Y-W')] = [\n                'Đang xử lý' => 0,\n                'Chưa xử lý' => 0,\n                'Hoàn thành' => 0,\n                'Đã hủy' => 0,\n            ];\n        }\n\n        // Lấy thống kê tuần\n        $weeklyStats = DB::table('request')\n            ->select(DB::raw(\"YEAR(create_at) as year, WEEK(create_at, 1) as week, status, count(*) as total\"))\n            ->whereBetween('create_at', [$startDate, $endDate])\n            ->groupBy('year', 'week', 'status')\n            ->get();\n\n        // Cập nhật mảng tuần với số liệu\n        foreach ($weeklyStats as $stat) {\n            $weekKey = $stat->year . '-' . str_pad($stat->week, 2, '0', STR_PAD_LEFT);\n            if (isset($weeks[$weekKey])) {\n                $weeks[$weekKey][$stat->status] = $stat->total;\n            }\n        }\n\n        // Trả về dữ liệu theo định dạng mong muốn\n        return array_map(function ($totals, $period) {\n            return [\n                'period' => $period,\n                'totals' => $totals,\n            ];\n        }, $weeks, array_keys($weeks));\n    }\n\n    private function getMonthlyStatistics()\n    {\n        $months = [];\n        $startDate = now()->startOfYear();\n        $endDate = now()->endOfYear();\n\n        for ($month = 1; $month <= 12; $month++) {\n            $months[$month] = [\n                'Đang xử lý' => 0,\n                'Chưa xử lý' => 0,\n                'Hoàn thành' => 0,\n                'Đã hủy' => 0,\n            ];\n        }\n\n        $monthlyStats = DB::table('request')\n            ->select(DB::raw(\"MONTH(create_at) as month\"), 'status', DB::raw('count(*) as total'))\n            ->whereBetween('create_at', [$startDate, $endDate])\n            ->groupBy('month', 'status')\n            ->get();\n\n        foreach ($monthlyStats as $stat) {\n            $months[$stat->month][$stat->status] = $stat->total;\n        }\n\n        return array_map(function ($totals, $month) {\n            return ['period' => $month, 'total' => $totals];\n        }, $months, array_keys($months));\n    }\n\n    private function getYearlyStatistics()\n    {\n        $years = [];\n\n        for ($year = 2020; $year <= 2030; $year++) {\n            $years[$year] = [\n                'Đang xử lý' => 0,\n                'Chưa xử lý' => 0,\n                'Hoàn thành' => 0,\n                'Đã hủy' => 0,\n            ];\n        }\n\n        $yearlyStats = DB::table('request')\n            ->select(DB::raw(\"YEAR(create_at) as year\"), 'status', DB::raw('count(*) as total'))\n            ->whereBetween('create_at', ['2020-01-01', '2030-12-31'])\n            ->groupBy('year', 'status')\n            ->get();\n\n        foreach ($yearlyStats as $stat) {\n            $years[$stat->year][$stat->status] = $stat->total;\n        }\n\n        return array_map(function ($totals, $year) {\n            return ['period' => $year, 'total' => $totals];\n        }, $years, array_keys($years));\n    }\n\n//    public function index()\n//    {\n//        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n//        $config = $this->config();\n//        // Số bài viết chưa phản hồi hôm nay\n//        $unansweredFaqsToday = FAQ::where('status', 'Chưa phản hồi')\n//            ->whereDate('create_at', now()->toDateString())\n//            ->count();\n//\n//        $pendingCustomerToday = Customer::whereDate('create_at', now()->toDateString())\n//            ->count();\n//\n//        // Số khách hàng hôm nay\n//        $totalCustomersToday = Customer::whereDate('create_at', now()->toDateString())->count();\n//\n//        // Số khách hàng ngày hôm qua\n//        $totalCustomersYesterday = Customer::whereDate('create_at', now()->subDay()->toDateString())->count();\n//\n//        // Tính phần trăm thay đổi khách hàng so với hôm qua\n//        $customerPercentageChange = $this->calculatePercentageChange($totalCustomersToday, $totalCustomersYesterday);\n//\n//        // Tổng số yêu cầu từ bảng request hôm nay\n//        $totalRequestsToday = SupportRequest::whereDate('create_at', now()->toDateString())->count();\n//\n//        // Tổng số yêu cầu từ bảng request ngày hôm qua\n//        $totalRequestsYesterday = SupportRequest::whereDate('create_at', now()->subDay()->toDateString())->count();\n//\n//        // Tính phần trăm thay đổi yêu cầu so với hôm qua\n//        $requestPercentageChange = $this->calculatePercentageChange($totalRequestsToday, $totalRequestsYesterday);\n//\n//\n//\n//        // Tổng số bài viết từ bảng faq hôm nay\n//        $totalFaqsToday = FAQ::whereDate('create_at', now()->toDateString())->count();\n//\n//        // Tổng số bài viết từ bảng faq ngày hôm qua\n//        $totalFaqsYesterday = FAQ::whereDate('create_at', now()->subDay()->toDateString())->count();\n//\n//        // Tính phần trăm thay đổi bài viết so với hôm qua\n//        $faqPercentageChange = $this->calculatePercentageChange($totalFaqsToday, $totalFaqsYesterday);\n//\n//\n//        // Dữ liệu yêu cầu theo trạng thái\n//        $requestStatusCounts = [\n//            'processing' => Request::where('status', 'Chưa xử lý')\n//                ->where('create_at', '>=', Carbon::now()->startOfWeek())\n//                ->count(),\n//            'handled' => Request::where('status', 'Đang xử lý')\n//                ->where('create_at', '>=', Carbon::now()->startOfWeek())\n//                ->count(),\n//            'completed' => Request::where('status', 'Hoàn thành')\n//                ->where('create_at', '>=', Carbon::now()->startOfWeek())\n//                ->count(),\n//            'cancelled' => Request::where('status', 'Đã hủy')\n//                ->where('create_at', '>=', Carbon::now()->startOfWeek())\n//                ->count(),\n//        ];\n//\n//\n//        // Lấy dữ liệu yêu cầu trong tuần này từ Thứ Hai đến Chủ Nhật\n//        $requestsThisWeek = SupportRequest::selectRaw('WEEKDAY(create_at) as weekday, COUNT(*) as total')\n//            ->whereBetween('create_at', [now()->startOfWeek(), now()->endOfWeek()])\n//            ->groupBy('weekday')\n//            ->orderBy('weekday', 'asc')\n//            ->get();\n//\n//        // Tạo mảng mặc định với số lượng yêu cầu là 0 cho cả tuần từ Thứ Hai đến Chủ Nhật\n//        $weekdays = ['Thứ Hai', 'Thứ Ba', 'Thứ Tư', 'Thứ Năm', 'Thứ Sáu', 'Thứ Bảy', 'CN'];\n//        $requestData = array_fill(0, 7, ['day' => '', 'total' => 0]);\n//\n//        foreach ($weekdays as $index => $day) {\n//            $requestData[$index]['day'] = $day;\n//        }\n//\n//        // Cập nhật dữ liệu thực tế từ $requestsThisWeek\n//        foreach ($requestsThisWeek as $request) {\n//            $requestData[$request->weekday]['total'] = $request->total;\n//        }\n//\n//        $data = RequestController::getUnreadRequests();\n//\n//        // Lấy danh sách request và số lượng request chưa đọc\n//        $unreadRequests = $data['unreadRequests'];\n//        $unreadRequestCount = $data['unreadRequestCount'];\n//\n//        $template = 'admin.dashboard.home.index';\n//\n//        return view('admin.dashboard.layout', compact(\n//            'template',\n//            'logged_user',\n//            'config',\n//            'unansweredFaqsToday',\n//            'totalCustomersToday',\n//            'customerPercentageChange',\n//            'totalRequestsToday',\n//            'requestPercentageChange',\n//            'totalFaqsToday',\n//            'faqPercentageChange',\n//            'requestStatusCounts',\n//            'requestData',\n//            'unreadRequests',\n//            'unreadRequestCount'\n//        ));\n//    }\n//\n//\n//    // Hàm tính phần trăm thay đổi\n//    private function calculatePercentageChange($todayCount, $yesterdayCount)\n//    {\n//        if ($yesterdayCount == 0 && $todayCount == 0) {\n//            return 0; // Không thay đổi nếu cả hôm qua và hôm nay đều không có\n//        }\n//\n//        if ($yesterdayCount == 0) {\n//            return $todayCount > 0 ? '100%' : 0; // Nếu hôm qua không có, nhưng hôm nay có\n//        }\n//\n//        $percentageChange = round((($todayCount - $yesterdayCount) / $yesterdayCount) * 100, 2);\n//\n//        // Giới hạn phần trăm tối đa là 100%\n//        return $percentageChange > 100 ? 100 : $percentageChange;\n//    }\n\n    private function config()\n    {\n        return [\n            'js' => [\n\n                'admin/js/plugins/jvectormap/jquery-jvectormap-2.0.2.min.js',\n                'admin/js/plugins/jvectormap/jquery-jvectormap-world-mill-en.js',\n                'admin/js/plugins/easypiechart/jquery.easypiechart.js',\n                'admin/js/plugins/sparkline/jquery.sparkline.min.js',\n                'admin/js/demo/sparkline-demo.js',\n            ],\n        ];\n    }\n}\n"
        }
    ]
}