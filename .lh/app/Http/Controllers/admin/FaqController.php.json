{
    "sourceFile": "app/Http/Controllers/admin/FaqController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1736264902127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736265030891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,259 @@\n+<?php\n+\n+namespace App\\Http\\Controllers\\Admin;\n+\n+use App\\Http\\Controllers\\Controller;\n+use App\\Mail\\FaqFeedback;\n+use App\\Models\\Employee;\n+use Illuminate\\Http\\Request;\n+use App\\Models\\FAQ;\n+use App\\Http\\Controllers\\admin\\RequestController;\n+use Illuminate\\Support\\Facades\\Auth;\n+use Illuminate\\Support\\Facades\\Mail;\n+use Illuminate\\Support\\Str;\n+\n+class FaqController extends Controller\n+{\n+    public function index(Request $request)\n+    {\n+        $template = 'admin.faq.index';\n+        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+\n+        // Lấy các tham số tìm kiếm\n+        $search = $request->input('search'); // Từ khóa tìm kiếm theo nội dung câu hỏi\n+        $statusFilter = $request->input('status'); // Trạng thái câu hỏi\n+        $date = $request->input('date'); // Ngày cụ thể (nếu có)\n+\n+        // Tìm kiếm FAQ\n+        $faqs = FAQ::where('status', 'Chưa phản hồi') // Lọc chỉ câu hỏi chưa phản hồi\n+            ->when($search, function ($query) use ($search) {\n+                // Tìm kiếm theo nội dung câu hỏi\n+                return $query->where('question', 'LIKE', \"%$search%\");\n+            })\n+            ->when($date, function ($query) use ($date) {\n+                // Lọc theo ngày tạo\n+                return $query->whereDate('create_at', $date);\n+            })\n+            ->paginate(5);\n+\n+        // Đếm số lượng kết quả tìm thấy\n+        $totalResults = $faqs->total();\n+\n+        // Xác định các tiêu chí tìm kiếm\n+        $isSearchWithDate = $search && $date; // Cả từ khóa và ngày\n+        $isSearchPerformed = $search || $date;\n+        $isTodaySearch = $date === now()->toDateString();\n+\n+        $data = RequestController::getUnreadRequests();\n+\n+        // Lấy danh sách request và số lượng request chưa đọc\n+        $unreadRequests = $data['unreadRequests'];\n+        $unreadRequestCount = $data['unreadRequestCount'];\n+\n+        return view('admin.dashboard.layout', compact(\n+            'template',\n+            'logged_user',\n+            'faqs',\n+            'search',\n+            'date',\n+            'statusFilter',\n+            'totalResults',\n+            'isSearchWithDate',\n+            'isSearchPerformed',\n+            'isTodaySearch',\n+            'unreadRequests',\n+            'unreadRequestCount'\n+        ));\n+    }\n+\n+\n+    public function create()\n+    {\n+        $template = 'admin.faq.create';\n+        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+\n+        $nextId = (string) Str::uuid();\n+\n+        $data = RequestController::getUnreadRequests();\n+\n+        // Lấy danh sách request và số lượng request chưa đọc\n+        $unreadRequests = $data['unreadRequests'];\n+        $unreadRequestCount = $data['unreadRequestCount'];\n+\n+        return view('admin.dashboard.layout', compact(\n+            'template',\n+            'logged_user',\n+            'nextId',\n+            'unreadRequests',\n+            'unreadRequestCount'\n+        ));\n+    }\n+\n+    public function store(Request $request)\n+    {\n+        $request->validate([\n+            'faq_id' => 'required|unique:faq,faq_id',\n+            'email' => 'required|email',\n+            'question' => 'required',\n+            'answer' => 'nullable',\n+        ]);\n+        $faq = new Faq();\n+        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+        if ($request->input('answer')) {\n+            $faq->faq_id = $request->input('faq_id');\n+            $faq->employee_id = $logged_user->employee_id;\n+            $faq->email = $request->input('email');\n+            $faq->question = $request->input('question');\n+            $faq->answer = $request->input('answer');\n+            $faq->status = 'Đã phản hồi';\n+        } else {\n+            $faq->faq_id = $request->input('faq_id');\n+            $faq->email = $request->input('email');\n+            $faq->question = $request->input('question');\n+            $faq->status = 'Chưa phản hồi';\n+        }\n+        $faq->create_at = now();\n+        $faq->save();\n+\n+        // Send email\n+        Mail::to($request->input('email'))->send(new FaqFeedback($faq->question, $faq->answer));\n+\n+        return redirect()->route('faq.index')->with('success', 'Câu hỏi đã được thêm thành công và email đã được gửi!');\n+    }\n+\n+    public function feedback($faq_id)\n+    {\n+        $template = 'admin.faq.feedback';\n+        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+        $faq = Faq::findOrFail($faq_id);\n+\n+        $data = RequestController::getUnreadRequests();\n+\n+        // Lấy danh sách request và số lượng request chưa đọc\n+        $unreadRequests = $data['unreadRequests'];\n+        $unreadRequestCount = $data['unreadRequestCount'];\n+\n+        return view('admin.dashboard.layout', compact(\n+            'template',\n+            'logged_user',\n+            'faq',\n+            'unreadRequests',\n+            'unreadRequestCount'\n+        ));\n+    }\n+\n+    public function feedbackProcess(Request $request, $faq_id)\n+    {\n+        $faq = FAQ::findOrFail($faq_id);\n+        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+\n+        $request->validate([\n+            'question' => 'required',\n+            'answer' => 'required',\n+        ]);\n+\n+        $faq->employee_id = $logged_user->employee_id;\n+        $faq->question = $request->input('question');\n+        $faq->answer = $request->input('answer');\n+        $faq->status = 'Đã phản hồi';\n+        $faq->save();\n+\n+        Mail::to($request->input('email'))->send(new FaqFeedback($faq->question, $faq->answer));\n+\n+        return redirect()->route('faq.index')->with('success', 'Câu hỏi đã được phản hồi!');\n+        // Gửi email thông báo\n+    }\n+\n+    public function destroy($faq_id)\n+    {\n+        $faq = Faq::findOrFail($faq_id);\n+        $faq->delete();\n+\n+        return redirect()->route('faq.index')->with('success', 'Câu hỏi đã được xóa!');\n+    }\n+\n+    public function unansweredByDate(Request $request)\n+    {\n+        // Lấy ngày từ request, nếu không có thì lấy ngày hiện tại\n+        $date = $request->input('date', now()->toDateString());\n+\n+        // Đếm số lượng câu hỏi chưa phản hồi theo ngày\n+        $count = FAQ::where('status', 'Chưa phản hồi')\n+            ->whereDate('create_at', $date)\n+            ->count();\n+\n+        return response()->json(['count' => $count]);\n+    }\n+\n+    public function getAnswer($faq_id)\n+    {\n+        $faq = FAQ::with('employee')->where(\"faq_id\", \"=\", $faq_id)->first();\n+\n+        if ($faq) {\n+            return response()->json([\n+                'success' => true,\n+                'employee' => 'Người trả lời: ' . $faq->employee->full_name,\n+                'question' => $faq->question,\n+                'answer' => 'Câu trả lời: ' . $faq->answer\n+            ]);\n+        }\n+\n+        return response()->json([\n+            'success' => false,\n+            'message' => 'Không tìm thấy câu trả lời.',\n+        ]);\n+    }\n+\n+\n+    // public function storeAjax(Request $request)\n+    // {\n+    //     $request->validate([\n+    //         'email' => 'required|email',\n+    //         'question' => 'required|string|max:1000',\n+    //     ], [\n+    //         'email.required' => 'Vui lòng nhập email.',\n+    //         'email.email' => 'Email không đúng định dạng.',\n+    //         'question.required' => 'Vui lòng nhập câu hỏi.',\n+    //     ]);\n+\n+    //     try {\n+    //         $faq = new FAQ();\n+    //         $faq->faq_id = 'FAQ' . str_pad(rand(1, 9999), 4, '0', STR_PAD_LEFT);\n+    //         $faq->email = $request->input('email');\n+    //         $faq->question = $request->input('question');\n+    //         $faq->status = 'Chưa phản hồi';\n+    //         $faq->create_at = now();\n+    //         $faq->save();\n+\n+    //         return response()->json(['success' => true, 'message' => 'Câu hỏi đã được gửi thành công!']);\n+    //     } catch (\\Exception $e) {\n+    //         return response()->json(['success' => false, 'message' => 'Có lỗi xảy ra: ' . $e->getMessage()], 500);\n+    //     }\n+    // }\n+    public function storeAjax(Request $request)\n+    {\n+        $request->validate([\n+            'email' => 'required|email',\n+            'question' => 'required|string|max:1000',\n+        ], [\n+            'email.required' => 'Vui lòng nhập email.',\n+            'email.email' => 'Email không đúng định dạng.',\n+            'question.required' => 'Vui lòng nhập câu hỏi.',\n+        ]);\n+\n+        try {\n+            $faq = new FAQ();\n+            // Tạo mã FAQ ngẫu nhiên giống như trong create\n+            $faq->faq_id = (string) \\Illuminate\\Support\\Str::uuid();\n+            $faq->email = $request->input('email');\n+            $faq->question = $request->input('question');\n+            $faq->status = 'Chưa phản hồi';\n+            $faq->create_at = now();\n+            $faq->save();\n+\n+            return response()->json(['success' => true, 'message' => 'Câu hỏi đã được gửi thành công!', 'faq_id' => $faq->faq_id]);\n+        } catch (\\Exception $e) {\n+            return response()->json(['success' => false, 'message' => 'Có lỗi xảy ra: ' . $e->getMessage()], 500);\n+        }\n+    }\n+}\n"
                }
            ],
            "date": 1736264902127,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Mail\\FaqFeedback;\nuse App\\Models\\Employee;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\FAQ;\nuse App\\Http\\Controllers\\admin\\ReportController;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Illuminate\\Support\\Str;\n\nclass FaqController extends Controller\n{\n    public function index(Request $request)\n    {\n        $template = 'admin.faq.index';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n        // Lấy các tham số tìm kiếm\n        $search = $request->input('search'); // Từ khóa tìm kiếm theo nội dung câu hỏi\n        $statusFilter = $request->input('status'); // Trạng thái câu hỏi\n        $date = $request->input('date'); // Ngày cụ thể (nếu có)\n\n        // Tìm kiếm FAQ\n        $faqs = FAQ::where('status', 'Chưa phản hồi') // Lọc chỉ câu hỏi chưa phản hồi\n            ->when($search, function ($query) use ($search) {\n                // Tìm kiếm theo nội dung câu hỏi\n                return $query->where('question', 'LIKE', \"%$search%\");\n            })\n            ->when($date, function ($query) use ($date) {\n                // Lọc theo ngày tạo\n                return $query->whereDate('create_at', $date);\n            })\n            ->paginate(5);\n\n        // Đếm số lượng kết quả tìm thấy\n        $totalResults = $faqs->total();\n\n        // Xác định các tiêu chí tìm kiếm\n        $isSearchWithDate = $search && $date; // Cả từ khóa và ngày\n        $isSearchPerformed = $search || $date;\n        $isTodaySearch = $date === now()->toDateString();\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        return view('admin.dashboard.layout', compact(\n            'template',\n            'logged_user',\n            'faqs',\n            'search',\n            'date',\n            'statusFilter',\n            'totalResults',\n            'isSearchWithDate',\n            'isSearchPerformed',\n            'isTodaySearch',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n\n    public function create()\n    {\n        $template = 'admin.faq.create';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n        $nextId = (string) Str::uuid();\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        return view('admin.dashboard.layout', compact(\n            'template',\n            'logged_user',\n            'nextId',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n    public function store(Request $request)\n    {\n        $request->validate([\n            'faq_id' => 'required|unique:faq,faq_id',\n            'email' => 'required|email',\n            'question' => 'required',\n            'answer' => 'nullable',\n        ]);\n        $faq = new Faq();\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n        if ($request->input('answer')) {\n            $faq->faq_id = $request->input('faq_id');\n            $faq->employee_id = $logged_user->employee_id;\n            $faq->email = $request->input('email');\n            $faq->question = $request->input('question');\n            $faq->answer = $request->input('answer');\n            $faq->status = 'Đã phản hồi';\n        } else {\n            $faq->faq_id = $request->input('faq_id');\n            $faq->email = $request->input('email');\n            $faq->question = $request->input('question');\n            $faq->status = 'Chưa phản hồi';\n        }\n        $faq->create_at = now();\n        $faq->save();\n\n        // Send email\n        Mail::to($request->input('email'))->send(new FaqFeedback($faq->question, $faq->answer));\n\n        return redirect()->route('faq.index')->with('success', 'Câu hỏi đã được thêm thành công và email đã được gửi!');\n    }\n\n    public function feedback($faq_id)\n    {\n        $template = 'admin.faq.feedback';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n        $faq = Faq::findOrFail($faq_id);\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        return view('admin.dashboard.layout', compact(\n            'template',\n            'logged_user',\n            'faq',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n    public function feedbackProcess(Request $request, $faq_id)\n    {\n        $faq = FAQ::findOrFail($faq_id);\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n        $request->validate([\n            'question' => 'required',\n            'answer' => 'required',\n        ]);\n\n        $faq->employee_id = $logged_user->employee_id;\n        $faq->question = $request->input('question');\n        $faq->answer = $request->input('answer');\n        $faq->status = 'Đã phản hồi';\n        $faq->save();\n\n        Mail::to($request->input('email'))->send(new FaqFeedback($faq->question, $faq->answer));\n\n        return redirect()->route('faq.index')->with('success', 'Câu hỏi đã được phản hồi!');\n        // Gửi email thông báo\n    }\n\n    public function destroy($faq_id)\n    {\n        $faq = Faq::findOrFail($faq_id);\n        $faq->delete();\n\n        return redirect()->route('faq.index')->with('success', 'Câu hỏi đã được xóa!');\n    }\n\n    public function unansweredByDate(Request $request)\n    {\n        // Lấy ngày từ request, nếu không có thì lấy ngày hiện tại\n        $date = $request->input('date', now()->toDateString());\n\n        // Đếm số lượng câu hỏi chưa phản hồi theo ngày\n        $count = FAQ::where('status', 'Chưa phản hồi')\n            ->whereDate('create_at', $date)\n            ->count();\n\n        return response()->json(['count' => $count]);\n    }\n\n    public function getAnswer($faq_id)\n    {\n        $faq = FAQ::with('employee')->where(\"faq_id\", \"=\", $faq_id)->first();\n\n        if ($faq) {\n            return response()->json([\n                'success' => true,\n                'employee' => 'Người trả lời: ' . $faq->employee->full_name,\n                'question' => $faq->question,\n                'answer' => 'Câu trả lời: ' . $faq->answer\n            ]);\n        }\n\n        return response()->json([\n            'success' => false,\n            'message' => 'Không tìm thấy câu trả lời.',\n        ]);\n    }\n\n\n    // public function storeAjax(Request $request)\n    // {\n    //     $request->validate([\n    //         'email' => 'required|email',\n    //         'question' => 'required|string|max:1000',\n    //     ], [\n    //         'email.required' => 'Vui lòng nhập email.',\n    //         'email.email' => 'Email không đúng định dạng.',\n    //         'question.required' => 'Vui lòng nhập câu hỏi.',\n    //     ]);\n\n    //     try {\n    //         $faq = new FAQ();\n    //         $faq->faq_id = 'FAQ' . str_pad(rand(1, 9999), 4, '0', STR_PAD_LEFT);\n    //         $faq->email = $request->input('email');\n    //         $faq->question = $request->input('question');\n    //         $faq->status = 'Chưa phản hồi';\n    //         $faq->create_at = now();\n    //         $faq->save();\n\n    //         return response()->json(['success' => true, 'message' => 'Câu hỏi đã được gửi thành công!']);\n    //     } catch (\\Exception $e) {\n    //         return response()->json(['success' => false, 'message' => 'Có lỗi xảy ra: ' . $e->getMessage()], 500);\n    //     }\n    // }\n    public function storeAjax(Request $request)\n    {\n        $request->validate([\n            'email' => 'required|email',\n            'question' => 'required|string|max:1000',\n        ], [\n            'email.required' => 'Vui lòng nhập email.',\n            'email.email' => 'Email không đúng định dạng.',\n            'question.required' => 'Vui lòng nhập câu hỏi.',\n        ]);\n\n        try {\n            $faq = new FAQ();\n            // Tạo mã FAQ ngẫu nhiên giống như trong create\n            $faq->faq_id = (string) \\Illuminate\\Support\\Str::uuid();\n            $faq->email = $request->input('email');\n            $faq->question = $request->input('question');\n            $faq->status = 'Chưa phản hồi';\n            $faq->create_at = now();\n            $faq->save();\n\n            return response()->json(['success' => true, 'message' => 'Câu hỏi đã được gửi thành công!', 'faq_id' => $faq->faq_id]);\n        } catch (\\Exception $e) {\n            return response()->json(['success' => false, 'message' => 'Có lỗi xảy ra: ' . $e->getMessage()], 500);\n        }\n    }\n}\n"
        }
    ]
}