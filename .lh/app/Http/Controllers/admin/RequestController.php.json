{
    "sourceFile": "app/Http/Controllers/admin/RequestController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1736157457386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736157471088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,452 @@\n+<?php\n+\n+namespace App\\Http\\Controllers\\Admin;\n+\n+use App\\Http\\Controllers\\Controller;\n+use App\\Models\\Request;\n+use App\\Mail\\DepartmentChangedMail;\n+use App\\Mail\\RequestResultMail;\n+use Illuminate\\Support\\Facades\\Mail;\n+use Illuminate\\Http\\Request as HttpRequest;\n+use App\\Models\\Request as SupportRequest;\n+use App\\Models\\Customer;\n+use App\\Models\\Department;\n+use App\\Models\\Employee;\n+use App\\Models\\RequestType;\n+use App\\Models\\RequestHistory;\n+use App\\Models\\Attachment;\n+use App\\Models\\CustomerFeedback;\n+use App\\Models\\EmployeeFeedback;\n+use Illuminate\\Support\\Facades\\Auth;\n+use Illuminate\\Support\\Facades\\Storage;\n+use Illuminate\\Support\\Str;\n+use Carbon\\Carbon;\n+\n+class RequestController extends Controller\n+{\n+    public static function getUnreadRequests()\n+    {\n+        // Lấy danh sách request có phản hồi chưa đọc từ khách hàng\n+        $unreadRequests = Request::whereHas('customerFeedbacks', function ($query) {\n+            $query->where('is_read', false);\n+        })\n+            ->with(['customer', 'customerFeedbacks' => function ($query) {\n+                $query->where('is_read', false)\n+                    ->select('request_id', 'created_at');\n+            }])\n+            ->get()\n+            ->map(function ($request) {\n+                $request->feedback_count = $request->customerFeedbacks->count();\n+                $request->last_feedback_time = $request->customerFeedbacks->max('created_at')\n+                    ? Carbon::parse($request->customerFeedbacks->max('created_at')) // Chuyển sang Carbon\n+                    : null;\n+                return $request;\n+            });\n+\n+        // Tính tổng số request có phản hồi chưa đọc\n+        $unreadRequestCount = $unreadRequests->count();\n+\n+        return compact('unreadRequests', 'unreadRequestCount');\n+    }\n+    /**\n+     * Hiển thị danh sách yêu cầu hỗ trợ kỹ thuật\n+     */\n+    public function index(HttpRequest $request)\n+    {\n+        $template = 'admin.request.index';\n+        $logged_user = Employee::with('user')->where('user_id', Auth::user()->user_id)->first();\n+\n+        // Lấy các input từ request\n+        $statusFilter = $request->input('status_search'); // Chọn từ phần nhập tiêu đề trước đây\n+        $subject = $request->input('subject'); // Chọn từ phần chọn trạng thái trước đây\n+\n+        //$subject = $request->input('subject'); // Lấy input 'subject'\n+        $searchField = $request->input('search_field');\n+        $customerId = $request->input('customer_id');\n+        $departmentId = $request->input('department_id');\n+        $requestDate = $request->input('request_date_search'); // Đổi tên để khớp với Blade\n+        //$statusFilter = $request->input('status_search'); // Đổi tên để khớp với Blade\n+        $requestTypeId = $request->input('request_type_id'); // Thêm input 'request_type_id'\n+\n+\n+        // Định nghĩa các trạng thái có sẵn bằng tiếng Việt\n+        $statuses = ['Chưa xử lý', 'Đang xử lý', 'Hoàn thành', 'Đã hủy'];\n+\n+        // Truy vấn các yêu cầu kèm theo quan hệ với Customer, Department, và RequestType\n+        $query = SupportRequest::with(['customer', 'department', 'requestType']);\n+\n+        $searchPerformed = false;\n+        $searchType = null;\n+        $search = '';\n+        $additionalSearchType = null;\n+        $additionalSearchValue = null;\n+\n+\n+        $statusFilter = $request->input('status_search'); // Nhận giá trị trạng thái từ form\n+\n+        if (!empty($statusFilter)) {\n+            $query->where('status', $statusFilter); // Thêm điều kiện lọc theo trạng thái\n+            $searchPerformed = true; // Đánh dấu rằng tìm kiếm đã được thực hiện\n+            $additionalSearchType = 'status';\n+            $additionalSearchValue = $statusFilter; // Lưu trạng thái được chọn để hiển thị\n+        }\n+\n+\n+        // Xử lý tìm kiếm bổ sung\n+        if (!empty($searchField)) {\n+            switch ($searchField) {\n+                case 'customer':\n+                    if (!empty($customerId)) {\n+                        $query->where('customer_id', $customerId);\n+                        $searchPerformed = true;\n+                        $customer = Customer::find($customerId);\n+                        $additionalSearchType = 'customer';\n+                        $additionalSearchValue = $customer ? $customer->full_name : 'N/A';\n+                    }\n+                    break;\n+                case 'department':\n+                    if (!empty($departmentId)) {\n+                        $query->where('department_id', $departmentId);\n+                        $searchPerformed = true;\n+                        $department = Department::find($departmentId);\n+                        $additionalSearchType = 'department';\n+                        $additionalSearchValue = $department ? $department->department_name : 'N/A';\n+                    }\n+                    break;\n+                case 'request_date':\n+                    if (!empty($requestDate)) {\n+                        $query->whereDate('create_at', $requestDate);\n+                        $searchPerformed = true;\n+                        $formattedDate = Carbon::parse($requestDate)->format('d/m/Y');\n+                        $additionalSearchType = 'request_date';\n+                        $additionalSearchValue = $formattedDate;\n+                    }\n+                    break;\n+                case 'request_type':\n+                    if (!empty($requestTypeId)) {\n+                        $query->where('request_type_id', $requestTypeId);\n+                        $searchPerformed = true;\n+                        $requestType = RequestType::find($requestTypeId);\n+                        $additionalSearchType = 'request_type';\n+                        $additionalSearchValue = $requestType ? $requestType->request_type_name : 'N/A';\n+                    }\n+                    break;\n+                case 'subject':\n+                    if (!empty($subject)) {\n+                        $query->where('subject', 'like', '%' . $subject . '%');\n+                        $searchPerformed = true;\n+                        $searchType = 'subject';\n+                        $search = $subject;\n+                    }\n+                    break;\n+\n+                default:\n+                    // Không làm gì nếu không khớp\n+                    break;\n+            }\n+        }\n+\n+        // Phân trang kết quả với 10 yêu cầu mỗi trang và giữ lại các tham số truy vấn\n+        $requests = $query->paginate(5)->appends($request->all());\n+\n+        // Lấy tổng số kết quả\n+        $count = $requests->total();\n+\n+        // Lấy danh sách cho các dropdown\n+        $customers = Customer::all();\n+        $departments = Department::all();\n+        $requestTypes = RequestType::all();\n+\n+        $data = RequestController::getUnreadRequests();\n+\n+        // Lấy danh sách request và số lượng request chưa đọc\n+        $unreadRequests = $data['unreadRequests'];\n+        $unreadRequestCount = $data['unreadRequestCount'];\n+\n+        // Truyền thêm các biến vào view\n+        return view('admin.dashboard.layout', compact(\n+            'template',\n+            'logged_user',\n+            'requests',\n+            'statuses',\n+            'count',\n+            'customers',\n+            'departments',\n+            'requestTypes',\n+            'searchPerformed',\n+            'searchType',\n+            'search',\n+            'additionalSearchType',\n+            'additionalSearchValue',\n+            'unreadRequests',\n+            'unreadRequestCount'\n+        ));\n+    }\n+\n+\n+\n+    /**\n+     * Hiển thị form tạo yêu cầu mới\n+     */\n+    public function create()\n+    {\n+        $template = 'admin.request.create';\n+        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+\n+        $nextId = (string) Str::uuid();\n+\n+\n+        // Lấy danh sách khách hàng, phòng ban, và loại yêu cầu để tạo các lựa chọn trong form\n+        $customers = Customer::all();\n+        $departments = Department::all();\n+        $requestTypes = RequestType::all();\n+\n+        $data = RequestController::getUnreadRequests();\n+\n+        // Lấy danh sách request và số lượng request chưa đọc\n+        $unreadRequests = $data['unreadRequests'];\n+        $unreadRequestCount = $data['unreadRequestCount'];\n+\n+        return view('admin.dashboard.layout', compact('template', 'logged_user', 'nextId', 'customers', 'departments', 'requestTypes', 'unreadRequests', 'unreadRequestCount'));\n+    }\n+\n+    /**\n+     * Lưu yêu cầu mới vào cơ sở dữ liệu\n+     */\n+    public function store(HttpRequest $request)\n+    {\n+        $request->validate([\n+            'request_id' => 'required|unique:request,request_id',\n+            'customer_id' => 'required|exists:customer,customer_id',\n+            'department_id' => 'required|exists:department,department_id',\n+            'request_type_id' => 'required|exists:request_type,request_type_id',\n+            'subject' => 'required|max:255',\n+            'description' => 'required',\n+            'create_at' => 'required|date',\n+        ]);\n+\n+        // Tạo yêu cầu mới\n+        SupportRequest::create([\n+            'request_id' => $request->input('request_id'),\n+            'customer_id' => $request->input('customer_id'),\n+            'department_id' => $request->input('department_id'),\n+            'request_type_id' => $request->input('request_type_id'),\n+            'subject' => $request->input('subject'),\n+            'description' => $request->input('description'),\n+            'create_at' => $request->input('create_at'),\n+            'resolved_at' => null,\n+            'status' => 'Chưa xử lý',\n+        ]);\n+\n+        // Lấy thông tin người tạo (admin)\n+        $logged_user = Employee::with('user')->where('user_id', Auth::user()->user_id)->first();\n+\n+        // Tạo bản ghi lịch sử đầu tiên với trạng thái \"Chưa xử lý\"\n+        RequestHistory::create([\n+            'request_id' => $request->input('request_id'),\n+            'changed_by' => $logged_user->employee_id,\n+            'old_status' => null,\n+            'new_status' => 'Chưa xử lý',\n+            'note' => 'Tạo yêu cầu',\n+            'changed_at' => now(),\n+        ]);\n+\n+        return redirect()->route('request.index')->with('success', 'Yêu cầu đã được thêm thành công!');\n+    }\n+\n+    private function getFeedback($feedbackModel, $joinModel, $foreignKey, $request_id)\n+    {\n+        return $feedbackModel::select(\n+            \"{$feedbackModel->getTable()}.id\",\n+            \"{$feedbackModel->getTable()}.request_id\",\n+            \"{$joinModel->getTable()}.full_name\",\n+            \"{$joinModel->getTable()}.profile_image\",\n+            \"{$feedbackModel->getTable()}.message\",\n+            \"{$feedbackModel->getTable()}.created_at\",\n+            \"user.role_id\"\n+        )\n+            ->join($joinModel->getTable(), \"{$joinModel->getTable()}.{$foreignKey}\", '=', \"{$feedbackModel->getTable()}.{$foreignKey}\")\n+            ->join('user', 'user.user_id', '=', \"{$joinModel->getTable()}.user_id\")\n+            ->where(\"{$feedbackModel->getTable()}.request_id\", $request_id);\n+    }\n+\n+    /**\n+     * Hiển thị form chỉnh sửa yêu cầu\n+     */\n+    public function edit($request_id)\n+    {\n+        $template = 'admin.request.edit';\n+        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+        $supportRequest = SupportRequest::with(['attachment', 'history'])->findOrFail($request_id); // Tải quan hệ attachment và history\n+\n+        // Chỉ lấy khách hàng có status là \"active\"\n+        $customers = Customer::where('status', 'active')->get();\n+\n+        $departments = Department::where('status', 'active')->get();\n+        $requestTypes = RequestType::all();\n+\n+        // Lấy feedback từ khách hàng\n+        $customerFeedbacks = $this->getFeedback(new CustomerFeedback(), new Customer(), 'customer_id', $request_id);\n+\n+        // Lấy feedback từ nhân viên\n+        $employeeFeedbacks = $this->getFeedback(new EmployeeFeedback(), new Employee(), 'employee_id', $request_id);\n+\n+        // Kết hợp feedback từ cả hai bảng\n+        $feedbacks = $customerFeedbacks->unionAll($employeeFeedbacks->toBase())->orderBy('created_at', 'asc')->get();\n+\n+        CustomerFeedback::where('request_id', $request_id)\n+            ->where('is_read', false)\n+            ->update(['is_read' => true]);\n+\n+        $data = RequestController::getUnreadRequests();\n+\n+        // Lấy danh sách request và số lượng request chưa đọc\n+        $unreadRequests = $data['unreadRequests'];\n+        $unreadRequestCount = $data['unreadRequestCount'];\n+\n+        return view('admin.dashboard.layout', compact('template', 'logged_user', 'supportRequest', 'customers', 'departments', 'requestTypes', 'feedbacks', 'unreadRequests', 'unreadRequestCount'));\n+    }\n+\n+\n+    /**\n+     * Cập nhật yêu cầu trong cơ sở dữ liệu\n+     */\n+    public function update(HttpRequest $request, $request_id)\n+    {\n+        // Tìm yêu cầu cần cập nhật\n+        $supportRequest = SupportRequest::with(['attachment', 'department', 'requestType', 'customer'])->findOrFail($request_id);\n+\n+        // Validate dữ liệu\n+        $validatedData = $request->validate([\n+            'customer_id' => 'required|exists:customer,customer_id',\n+            'department_id' => 'required|exists:department,department_id',\n+            'request_type_id' => 'required|exists:request_type,request_type_id',\n+            'subject' => 'required|max:255',\n+            'description' => 'required',\n+            'status' => 'required|in:Chưa xử lý,Đang xử lý,Hoàn thành,Đã hủy',\n+            'attachments' => 'nullable|file|mimes:jpg,jpeg,png,pdf,doc,docx,txt|max:40960',\n+        ]);\n+\n+        // Kiểm tra điều kiện cập nhật trạng thái\n+        if ($supportRequest->status === 'Chưa xử lý' && $validatedData['department_id']) {\n+            $validatedData['status'] = 'Đang xử lý';\n+        }\n+\n+        if ($supportRequest->department_id !== $validatedData['department_id']) {\n+            if ($validatedData['department_id'] && $supportRequest->status === 'Chưa xử lý') {\n+                $validatedData['status'] = 'Đang xử lý';\n+            }\n+        }\n+\n+        // Lưu thông tin yêu cầu mới\n+        $supportRequest->update([\n+            'customer_id' => $validatedData['customer_id'],\n+            'department_id' => $validatedData['department_id'],\n+            'request_type_id' => $validatedData['request_type_id'],\n+            'subject' => $validatedData['subject'],\n+            'description' => $validatedData['description'],\n+            'resolved_at' => $validatedData['status'] === 'Hoàn thành' ? now() : $supportRequest->resolved_at,\n+            'status' => $validatedData['status'],\n+        ]);\n+\n+        $supportRequest->refresh();\n+\n+\n+        // Nếu trạng thái chuyển sang \"Hoàn thành\", xóa các phản hồi\n+        if ($validatedData['status'] === 'Hoàn thành') {\n+            CustomerFeedback::where('request_id', $request_id)->delete();\n+            EmployeeFeedback::where('request_id', $request_id)->delete();\n+        }\n+\n+        // Nếu phòng ban thay đổi, xóa các phản hồi\n+        if ($supportRequest->wasChanged('department_id')) {\n+            CustomerFeedback::where('request_id', $request_id)->delete();\n+            EmployeeFeedback::where('request_id', $request_id)->delete();\n+\n+            Mail::to($supportRequest->customer->email)\n+                ->send(new DepartmentChangedMail($supportRequest));\n+        }\n+\n+        if ($supportRequest->wasChanged('status')) {\n+            // Gửi mail\n+            Mail::to($supportRequest->customer->email)\n+                ->send(new RequestResultMail($supportRequest));\n+        }\n+\n+        // Lưu lịch sử thay đổi trạng thái nếu trạng thái hoặc phòng ban thay đổi\n+        if ($supportRequest->wasChanged('status') || $supportRequest->wasChanged('department_id')) {\n+            $logged_user = Employee::with('user')->where('user_id', Auth::user()->user_id)->first();\n+\n+            RequestHistory::create([\n+                'request_id'    => $request_id,\n+                'changed_by'    => $logged_user->employee_id,\n+                'old_status'    => $supportRequest->getOriginal('status'),\n+                'new_status'    => $validatedData['status'],\n+                'note'          => $request->input('note', 'Cập nhật trạng thái yêu cầu'),\n+                'changed_at'    => now(),\n+                'department_id' => $validatedData['department_id'],\n+            ]);\n+        }\n+\n+        // Xử lý file đính kèm nếu có\n+        if ($request->hasFile('attachments')) {\n+            if ($supportRequest->attachment) {\n+                if (Storage::disk('public')->exists($supportRequest->attachment->file_path)) {\n+                    Storage::disk('public')->delete($supportRequest->attachment->file_path);\n+                }\n+                $supportRequest->attachment->delete();\n+            }\n+\n+            $file = $request->file('attachments');\n+            $filename = $file->getClientOriginalName();\n+            $filePath = $file->store('attachments', 'public');\n+            $fileSize = $file->getSize();\n+            $fileType = $file->getClientOriginalExtension();\n+\n+            $supportRequest->attachment()->create([\n+                'attachment_id' => (string) Str::uuid(),\n+                'filename' => $filename,\n+                'file_path' => $filePath,\n+                'file_size' => $fileSize,\n+                'file_type' => $fileType,\n+            ]);\n+        }\n+\n+        return redirect()->route('request.index')->with('success', 'Thông tin yêu cầu đã được cập nhật!');\n+    }\n+\n+    /**\n+     * Xóa yêu cầu khỏi cơ sở dữ liệu\n+     */\n+    public function destroy($request_id)\n+    {\n+        $supportRequest = SupportRequest::findOrFail($request_id);\n+        $supportRequest->delete();\n+\n+        return redirect()->route('request.index')->with('success', 'Yêu cầu đã được xóa thành công!');\n+    }\n+\n+    public function getPendingRequestsByDate(HttpRequest $request)\n+    {\n+\n+        $date = $request->input('date', now()->toDateString());\n+        $pendingRequests = SupportRequest::whereDate('create_at', $date)\n+            ->where('status', 'Chưa xử lý')\n+            ->count();\n+\n+        return response()->json(['count' => $pendingRequests]);\n+    }\n+\n+    public function reply(HttpRequest $request, $request_id)\n+    {\n+        $logged_user = Employee::with('user')->where('user_id', Auth::user()->user_id)->first();\n+\n+        $employee_feedback = new EmployeeFeedback();\n+        $employee_feedback->request_id = $request_id;\n+        $employee_feedback->employee_id = $logged_user->employee_id;\n+        $employee_feedback->message = $request->input('reply_content');\n+        $employee_feedback->Save();\n+\n+        return redirect()->route('request.edit', $request_id)->with('success', 'Phản hồi đã được gửi thành công!');\n+    }\n+}\n"
                }
            ],
            "date": 1736157457386,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Request;\nuse App\\Mail\\DepartmentChangedMail;\nuse App\\Mail\\RequestResultMail;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Illuminate\\Http\\Request as HttpRequest;\nuse App\\Models\\Request as SupportRequest;\nuse App\\Models\\Customer;\nuse App\\Models\\Department;\nuse App\\Models\\Employee;\nuse App\\Models\\RequestType;\nuse App\\Models\\RequestHistory;\nuse App\\Models\\Attachment;\nuse App\\Models\\CustomerFeedback;\nuse App\\Models\\EmployeeFeedback;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Str;\nuse Carbon\\Carbon;\n\nclass RequestController extends Controller\n{\n    public static function getUnreadRequests()\n    {\n        // Lấy danh sách request có phản hồi chưa đọc từ khách hàng\n        $unreadRequests = Request::whereHas('customerFeedbacks', function ($query) {\n            $query->where('is_read', false);\n        })\n            ->with(['customer', 'customerFeedbacks' => function ($query) {\n                $query->where('is_read', false)\n                    ->select('request_id', 'created_at');\n            }])\n            ->get()\n            ->map(function ($request) {\n                $request->feedback_count = $request->customerFeedbacks->count();\n                $request->last_feedback_time = $request->customerFeedbacks->max('created_at')\n                    ? Carbon::parse($request->customerFeedbacks->max('created_at')) // Chuyển sang Carbon\n                    : null;\n                return $request;\n            });\n\n        // Tính tổng số request có phản hồi chưa đọc\n        $unreadRequestCount = $unreadRequests->count();\n\n        return compact('unreadRequests', 'unreadRequestCount');\n    }\n    /**\n     * Hiển thị danh sách yêu cầu hỗ trợ kỹ thuật\n     */\n    public function index(HttpRequest $request)\n    {\n        $template = 'admin.request.index';\n        $logged_user = Employee::with('user')->where('user_id', Auth::user()->user_id)->first();\n\n        // Lấy các input từ request\n        $statusFilter = $request->input('status_search'); // Chọn từ phần nhập tiêu đề trước đây\n        $subject = $request->input('subject'); // Chọn từ phần chọn trạng thái trước đây\n\n        //$subject = $request->input('subject'); // Lấy input 'subject'\n        $searchField = $request->input('search_field');\n        $customerId = $request->input('customer_id');\n        $departmentId = $request->input('department_id');\n        $requestDate = $request->input('request_date_search'); // Đổi tên để khớp với Blade\n        //$statusFilter = $request->input('status_search'); // Đổi tên để khớp với Blade\n        $requestTypeId = $request->input('request_type_id'); // Thêm input 'request_type_id'\n\n\n        // Định nghĩa các trạng thái có sẵn bằng tiếng Việt\n        $statuses = ['Chưa xử lý', 'Đang xử lý', 'Hoàn thành', 'Đã hủy'];\n\n        // Truy vấn các yêu cầu kèm theo quan hệ với Customer, Department, và RequestType\n        $query = SupportRequest::with(['customer', 'department', 'requestType']);\n\n        $searchPerformed = false;\n        $searchType = null;\n        $search = '';\n        $additionalSearchType = null;\n        $additionalSearchValue = null;\n\n\n        $statusFilter = $request->input('status_search'); // Nhận giá trị trạng thái từ form\n\n        if (!empty($statusFilter)) {\n            $query->where('status', $statusFilter); // Thêm điều kiện lọc theo trạng thái\n            $searchPerformed = true; // Đánh dấu rằng tìm kiếm đã được thực hiện\n            $additionalSearchType = 'status';\n            $additionalSearchValue = $statusFilter; // Lưu trạng thái được chọn để hiển thị\n        }\n\n\n        // Xử lý tìm kiếm bổ sung\n        if (!empty($searchField)) {\n            switch ($searchField) {\n                case 'customer':\n                    if (!empty($customerId)) {\n                        $query->where('customer_id', $customerId);\n                        $searchPerformed = true;\n                        $customer = Customer::find($customerId);\n                        $additionalSearchType = 'customer';\n                        $additionalSearchValue = $customer ? $customer->full_name : 'N/A';\n                    }\n                    break;\n                case 'department':\n                    if (!empty($departmentId)) {\n                        $query->where('department_id', $departmentId);\n                        $searchPerformed = true;\n                        $department = Department::find($departmentId);\n                        $additionalSearchType = 'department';\n                        $additionalSearchValue = $department ? $department->department_name : 'N/A';\n                    }\n                    break;\n                case 'request_date':\n                    if (!empty($requestDate)) {\n                        $query->whereDate('create_at', $requestDate);\n                        $searchPerformed = true;\n                        $formattedDate = Carbon::parse($requestDate)->format('d/m/Y');\n                        $additionalSearchType = 'request_date';\n                        $additionalSearchValue = $formattedDate;\n                    }\n                    break;\n                case 'request_type':\n                    if (!empty($requestTypeId)) {\n                        $query->where('request_type_id', $requestTypeId);\n                        $searchPerformed = true;\n                        $requestType = RequestType::find($requestTypeId);\n                        $additionalSearchType = 'request_type';\n                        $additionalSearchValue = $requestType ? $requestType->request_type_name : 'N/A';\n                    }\n                    break;\n                case 'subject':\n                    if (!empty($subject)) {\n                        $query->where('subject', 'like', '%' . $subject . '%');\n                        $searchPerformed = true;\n                        $searchType = 'subject';\n                        $search = $subject;\n                    }\n                    break;\n\n                default:\n                    // Không làm gì nếu không khớp\n                    break;\n            }\n        }\n\n        // Phân trang kết quả với 10 yêu cầu mỗi trang và giữ lại các tham số truy vấn\n        $requests = $query->paginate(5)->appends($request->all());\n\n        // Lấy tổng số kết quả\n        $count = $requests->total();\n\n        // Lấy danh sách cho các dropdown\n        $customers = Customer::all();\n        $departments = Department::all();\n        $requestTypes = RequestType::all();\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        // Truyền thêm các biến vào view\n        return view('admin.dashboard.layout', compact(\n            'template',\n            'logged_user',\n            'requests',\n            'statuses',\n            'count',\n            'customers',\n            'departments',\n            'requestTypes',\n            'searchPerformed',\n            'searchType',\n            'search',\n            'additionalSearchType',\n            'additionalSearchValue',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n\n\n    /**\n     * Hiển thị form tạo yêu cầu mới\n     */\n    public function create()\n    {\n        $template = 'admin.request.create';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n        $nextId = (string) Str::uuid();\n\n\n        // Lấy danh sách khách hàng, phòng ban, và loại yêu cầu để tạo các lựa chọn trong form\n        $customers = Customer::all();\n        $departments = Department::all();\n        $requestTypes = RequestType::all();\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        return view('admin.dashboard.layout', compact('template', 'logged_user', 'nextId', 'customers', 'departments', 'requestTypes', 'unreadRequests', 'unreadRequestCount'));\n    }\n\n    /**\n     * Lưu yêu cầu mới vào cơ sở dữ liệu\n     */\n    public function store(HttpRequest $request)\n    {\n        $request->validate([\n            'request_id' => 'required|unique:request,request_id',\n            'customer_id' => 'required|exists:customer,customer_id',\n            'department_id' => 'required|exists:department,department_id',\n            'request_type_id' => 'required|exists:request_type,request_type_id',\n            'subject' => 'required|max:255',\n            'description' => 'required',\n            'create_at' => 'required|date',\n        ]);\n\n        // Tạo yêu cầu mới\n        SupportRequest::create([\n            'request_id' => $request->input('request_id'),\n            'customer_id' => $request->input('customer_id'),\n            'department_id' => $request->input('department_id'),\n            'request_type_id' => $request->input('request_type_id'),\n            'subject' => $request->input('subject'),\n            'description' => $request->input('description'),\n            'create_at' => $request->input('create_at'),\n            'resolved_at' => null,\n            'status' => 'Chưa xử lý',\n        ]);\n\n        // Lấy thông tin người tạo (admin)\n        $logged_user = Employee::with('user')->where('user_id', Auth::user()->user_id)->first();\n\n        // Tạo bản ghi lịch sử đầu tiên với trạng thái \"Chưa xử lý\"\n        RequestHistory::create([\n            'request_id' => $request->input('request_id'),\n            'changed_by' => $logged_user->employee_id,\n            'old_status' => null,\n            'new_status' => 'Chưa xử lý',\n            'note' => 'Tạo yêu cầu',\n            'changed_at' => now(),\n        ]);\n\n        return redirect()->route('request.index')->with('success', 'Yêu cầu đã được thêm thành công!');\n    }\n\n    private function getFeedback($feedbackModel, $joinModel, $foreignKey, $request_id)\n    {\n        return $feedbackModel::select(\n            \"{$feedbackModel->getTable()}.id\",\n            \"{$feedbackModel->getTable()}.request_id\",\n            \"{$joinModel->getTable()}.full_name\",\n            \"{$joinModel->getTable()}.profile_image\",\n            \"{$feedbackModel->getTable()}.message\",\n            \"{$feedbackModel->getTable()}.created_at\",\n            \"user.role_id\"\n        )\n            ->join($joinModel->getTable(), \"{$joinModel->getTable()}.{$foreignKey}\", '=', \"{$feedbackModel->getTable()}.{$foreignKey}\")\n            ->join('user', 'user.user_id', '=', \"{$joinModel->getTable()}.user_id\")\n            ->where(\"{$feedbackModel->getTable()}.request_id\", $request_id);\n    }\n\n    /**\n     * Hiển thị form chỉnh sửa yêu cầu\n     */\n    public function edit($request_id)\n    {\n        $template = 'admin.request.edit';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n        $supportRequest = SupportRequest::with(['attachment', 'history'])->findOrFail($request_id); // Tải quan hệ attachment và history\n\n        // Chỉ lấy khách hàng có status là \"active\"\n        $customers = Customer::where('status', 'active')->get();\n\n        $departments = Department::where('status', 'active')->get();\n        $requestTypes = RequestType::all();\n\n        // Lấy feedback từ khách hàng\n        $customerFeedbacks = $this->getFeedback(new CustomerFeedback(), new Customer(), 'customer_id', $request_id);\n\n        // Lấy feedback từ nhân viên\n        $employeeFeedbacks = $this->getFeedback(new EmployeeFeedback(), new Employee(), 'employee_id', $request_id);\n\n        // Kết hợp feedback từ cả hai bảng\n        $feedbacks = $customerFeedbacks->unionAll($employeeFeedbacks->toBase())->orderBy('created_at', 'acs')->get();\n\n        CustomerFeedback::where('request_id', $request_id)\n            ->where('is_read', false)\n            ->update(['is_read' => true]);\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        return view('admin.dashboard.layout', compact('template', 'logged_user', 'supportRequest', 'customers', 'departments', 'requestTypes', 'feedbacks', 'unreadRequests', 'unreadRequestCount'));\n    }\n\n\n    /**\n     * Cập nhật yêu cầu trong cơ sở dữ liệu\n     */\n    public function update(HttpRequest $request, $request_id)\n    {\n        // Tìm yêu cầu cần cập nhật\n        $supportRequest = SupportRequest::with(['attachment','department','requestType','customer'])->findOrFail($request_id);\n\n        // Validate dữ liệu\n        $validatedData = $request->validate([\n            'customer_id' => 'required|exists:customer,customer_id',\n            'department_id' => 'required|exists:department,department_id',\n            'request_type_id' => 'required|exists:request_type,request_type_id',\n            'subject' => 'required|max:255',\n            'description' => 'required',\n            'status' => 'required|in:Chưa xử lý,Đang xử lý,Hoàn thành,Đã hủy',\n            'attachments' => 'nullable|file|mimes:jpg,jpeg,png,pdf,doc,docx,txt|max:40960',\n        ]);\n\n        // Kiểm tra điều kiện cập nhật trạng thái\n        if ($supportRequest->status === 'Chưa xử lý' && $validatedData['department_id']) {\n            $validatedData['status'] = 'Đang xử lý';\n        }\n\n        if ($supportRequest->department_id !== $validatedData['department_id']) {\n            if ($validatedData['department_id'] && $supportRequest->status === 'Chưa xử lý') {\n                $validatedData['status'] = 'Đang xử lý';\n            }\n        }\n\n        // Lưu thông tin yêu cầu mới\n        $supportRequest->update([\n            'customer_id' => $validatedData['customer_id'],\n            'department_id' => $validatedData['department_id'],\n            'request_type_id' => $validatedData['request_type_id'],\n            'subject' => $validatedData['subject'],\n            'description' => $validatedData['description'],\n            'resolved_at' => $validatedData['status'] === 'Hoàn thành' ? now() : $supportRequest->resolved_at,\n            'status' => $validatedData['status'],\n        ]);\n\n        $supportRequest->refresh();\n\n\n        // Nếu trạng thái chuyển sang \"Hoàn thành\", xóa các phản hồi\n        if ($validatedData['status'] === 'Hoàn thành') {\n            CustomerFeedback::where('request_id', $request_id)->delete();\n            EmployeeFeedback::where('request_id', $request_id)->delete();\n        }\n\n        // Nếu phòng ban thay đổi, xóa các phản hồi\n        if ($supportRequest->wasChanged('department_id')) {\n            CustomerFeedback::where('request_id', $request_id)->delete();\n            EmployeeFeedback::where('request_id', $request_id)->delete();\n\n            Mail::to($supportRequest->customer->email)\n                ->send(new DepartmentChangedMail($supportRequest));\n        }\n\n        if ($supportRequest->wasChanged('status')) {\n            // Gửi mail\n            Mail::to($supportRequest->customer->email)\n                ->send(new RequestResultMail($supportRequest));\n        }\n\n        // Lưu lịch sử thay đổi trạng thái nếu trạng thái hoặc phòng ban thay đổi\n        if ($supportRequest->wasChanged('status') || $supportRequest->wasChanged('department_id')) {\n            $logged_user = Employee::with('user')->where('user_id', Auth::user()->user_id)->first();\n\n            RequestHistory::create([\n                'request_id'    => $request_id,\n                'changed_by'    => $logged_user->employee_id,\n                'old_status'    => $supportRequest->getOriginal('status'),\n                'new_status'    => $validatedData['status'],\n                'note'          => $request->input('note', 'Cập nhật trạng thái yêu cầu'),\n                'changed_at'    => now(),\n                'department_id' => $validatedData['department_id'],\n            ]);\n        }\n\n        // Xử lý file đính kèm nếu có\n        if ($request->hasFile('attachments')) {\n            if ($supportRequest->attachment) {\n                if (Storage::disk('public')->exists($supportRequest->attachment->file_path)) {\n                    Storage::disk('public')->delete($supportRequest->attachment->file_path);\n                }\n                $supportRequest->attachment->delete();\n            }\n\n            $file = $request->file('attachments');\n            $filename = $file->getClientOriginalName();\n            $filePath = $file->store('attachments', 'public');\n            $fileSize = $file->getSize();\n            $fileType = $file->getClientOriginalExtension();\n\n            $supportRequest->attachment()->create([\n                'attachment_id' => (string) Str::uuid(),\n                'filename' => $filename,\n                'file_path' => $filePath,\n                'file_size' => $fileSize,\n                'file_type' => $fileType,\n            ]);\n        }\n\n        return redirect()->route('request.index')->with('success', 'Thông tin yêu cầu đã được cập nhật!');\n    }\n\n    /**\n     * Xóa yêu cầu khỏi cơ sở dữ liệu\n     */\n    public function destroy($request_id)\n    {\n        $supportRequest = SupportRequest::findOrFail($request_id);\n        $supportRequest->delete();\n\n        return redirect()->route('request.index')->with('success', 'Yêu cầu đã được xóa thành công!');\n    }\n\n    public function getPendingRequestsByDate(HttpRequest $request)\n    {\n\n        $date = $request->input('date', now()->toDateString());\n        $pendingRequests = SupportRequest::whereDate('create_at', $date)\n            ->where('status', 'Chưa xử lý')\n            ->count();\n\n        return response()->json(['count' => $pendingRequests]);\n    }\n\n    public function reply(HttpRequest $request, $request_id)\n    {\n        $logged_user = Employee::with('user')->where('user_id', Auth::user()->user_id)->first();\n\n        $employee_feedback = new EmployeeFeedback();\n        $employee_feedback->request_id = $request_id;\n        $employee_feedback->employee_id = $logged_user->employee_id;\n        $employee_feedback->message = $request->input('reply_content');\n        $employee_feedback->Save();\n\n        return redirect()->route('request.edit', $request_id)->with('success', 'Phản hồi đã được gửi thành công!');\n    }\n}\n"
        }
    ]
}