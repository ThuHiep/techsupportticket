{
    "sourceFile": "app/Http/Controllers/admin/ArticlesController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736265037469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736265037469,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Employee;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Article;\nuse Illuminate\\Support\\Carbon;\nuse Illuminate\\Support\\Facades\\Auth;\nuse App\\Http\\Controllers\\admin\\RequestController;\nuse Illuminate\\Support\\Str;\n\n\nclass ArticlesController extends Controller\n{\n    public function index(Request $request)\n    {\n        $template = 'admin.articles.index';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n        $search = $request->input('search');\n        $date = $request->input('date');\n\n        $articles = Article::when($search, function ($query) use ($search) {\n            return $query->where('title', 'LIKE', \"%$search%\");\n        })\n            ->when($date, function ($query) use ($date) {\n                return $query->whereDate('create_at', $date);\n            })\n            ->paginate(5);\n\n\n        $totalResults = $articles->total();\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        return view('admin.dashboard.layout', compact(\n            'template',\n            'logged_user',\n            'articles',\n            'search',\n            'date',\n            'totalResults',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n    public function create()\n    {\n        $template = 'admin.articles.create';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n        $nextId = (string) Str::uuid();\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        return view('admin.dashboard.layout', compact(\n            'template',\n            'logged_user',\n            'nextId',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n    public function store(Request $request)\n    {\n        // Xác thực dữ liệu đầu vào\n        $request->validate([\n            'article_id' => 'required|unique:articles,article_id',\n            'title' => 'required|string|max:255',\n            'content' => 'required|string',\n            'images' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048', // Kiểm tra file ảnh\n        ]);\n\n\n        // Lấy thông tin người dùng hiện tại\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n        // Xử lý lưu ảnh\n        if ($request->hasFile('images')) {\n            $file = $request->file('images'); // Lấy file từ request\n            $fileName = 'articles_' . time() . '.' . $file->getClientOriginalExtension(); // Đặt tên file\n            $destinationPath = public_path('admin/img/articles'); // Đường dẫn lưu file\n\n            // Di chuyển file vào thư mục đích\n            $file->move($destinationPath, $fileName);\n\n            // Chỉ lưu tên file vào cơ sở dữ liệu\n            $imagePath = $fileName;\n        } else {\n            $imagePath = null; // Nếu không có ảnh\n        }\n\n        // Tạo bài viết mới\n        $article = new Article();\n        $article->article_id = $request->input('article_id');\n        $article->title = $request->input('title');\n        $article->content = $request->input('content');\n\n        $article->images = $imagePath; // Lưu đường dẫn ảnh vào cột 'images'\n        $article->employee_id = $logged_user->employee_id;\n        $article->create_at = now();\n        $article->save();\n\n        return redirect()->route('articles.index')->with('success', 'Bài viết đã được thêm thành công!');\n    }\n\n\n    public function edit($article_id)\n    {\n        $template = 'admin.articles.edit';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n        $article = Article::findOrFail($article_id);\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        return view('admin.dashboard.layout', compact(\n            'template',\n            'logged_user',\n            'article',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n    public function update(Request $request, $article_id)\n    {\n        // Xác thực dữ liệu đầu vào\n        $request->validate([\n            'title' => 'required|string|max:255',\n            'content' => 'required|string',\n            'images' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048', // Kiểm tra file ảnh\n        ]);\n\n        // Lấy bài viết cần cập nhật\n        $article = Article::findOrFail($article_id);\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n        // Xóa ảnh cũ nếu có và người dùng upload ảnh mới\n        if ($request->hasFile('images')) {\n            if ($article->images && file_exists(public_path('admin/img/articles/' . $article->images))) {\n                unlink(public_path('admin/img/articles/' . $article->images)); // Xóa ảnh cũ\n            }\n\n            // Lưu ảnh mới\n            $file = $request->file('images');\n            $fileName = 'update_' . time() . '.' . $file->getClientOriginalExtension();\n            $destinationPath = public_path('admin/img/articles'); // Thư mục lưu ảnh\n            $file->move($destinationPath, $fileName); // Di chuyển file vào thư mục\n\n            $article->images = $fileName; // Lưu tên ảnh mới vào DB\n        }\n\n        // Cập nhật thông tin bài viết\n        $article->title = $request->input('title');\n        $article->content = $request->input('content');\n        $article->employee_id = $logged_user->employee_id;\n        $article->update_at = now();\n        $article->save();\n\n        return redirect()->route('articles.index')->with('success', 'Bài viết đã được cập nhật thành công!');\n    }\n\n\n    public function destroy($article_id)\n    {\n        $article = Article::findOrFail($article_id);\n\n        // Kiểm tra đường dẫn file\n        $filePath = public_path('admin/img/articles/' . $article->images);\n\n        // Kiểm tra và xóa ảnh nếu có\n        if ($article->images && file_exists($filePath)) {\n            unlink($filePath);\n        }\n\n        // Xóa bài viết\n        $article->delete();\n\n        return redirect()->route('articles.index')->with('success', 'Bài viết và ảnh đã được xóa!');\n    }\n}\n"
        }
    ]
}