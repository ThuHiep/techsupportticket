{
    "sourceFile": "app/Http/Controllers/admin/CustomerController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736265928038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736265928038,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Mail\\AccountApproved;\nuse App\\Mail\\AccountRejected;\nuse App\\Mail\\CustomerUpdated;\nuse App\\Models\\Customer;\nuse App\\Models\\CustomerFeedback;\nuse App\\Http\\Controllers\\admin\\RequestController;\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\nuse App\\Mail\\CustomerCreated;\nuse App\\Models\\Employee;\nuse Illuminate\\Support\\Carbon;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Illuminate\\Support\\Facades\\Hash;\n\n\nclass CustomerController extends Controller\n{\n    public function generateRandomPassword($length)\n    {\n        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        $password = '';\n        $charactersLength = strlen($characters);\n\n        for ($i = 0; $i < $length; $i++) {\n            $password .= $characters[mt_rand(0, $charactersLength - 1)];\n        }\n\n        return $password;\n    }\n    public function index(Request $request)\n    {\n        $template = 'admin.customer.index';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n        $search = $request->input('search');\n        $searchPerformed = $search !== null && $search !== '';\n\n        // Truy vấn khách hàng có status là 'active'\n        $customers = Customer::where('status', 'active')\n            ->when($search, function ($query) use ($search) {\n                return $query->whereRaw(\"full_name COLLATE utf8_general_ci LIKE ?\", [\"%$search%\"]);\n            })\n            ->paginate(3);\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        return view('admin.dashboard.layout', compact(\n            'template',\n            'logged_user',\n            'customers',\n            'searchPerformed',\n            'search',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n    // Hiển thị form tạo khách hàng mới\n    public function create()\n    {\n        $customers = Customer::with('user')->get(); // Load quan hệ user để lấy email\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        // Truyền các giá trị vào view\n        $template = 'admin.customer.create';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n        return view('admin.dashboard.layout', compact(\n            'template',\n            'logged_user',\n            'customers',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n\n    // Hiển thị form chỉnh sửa khách hàng\n    public function edit($customer_id)\n    {\n        $template = 'admin.customer.edit';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n        $customers = Customer::findOrFail($customer_id);\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        return view('admin.dashboard.layout', compact(\n            'template',\n            'logged_user',\n            'customers',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n    public function update(Request $request, $customer_id)\n    {\n\n        $customer = Customer::findOrFail($customer_id);\n\n        // Cập nhật thông tin người dùng\n        $user = $customer->user; // Lấy người dùng liên kết với khách hàng\n\n        // Cập nhật username nếu có\n        if ($request->has('username')) {\n            $user->username = $request->input('username');\n            $user->save(); // Lưu thay đổi\n        }\n        // Xử lý ảnh đại diện\n        $profileImagePath = $customer->profile_image;\n        if ($request->hasFile('profile_image')) {\n            if ($profileImagePath && file_exists(public_path('admin/img/customer/' . $profileImagePath))) {\n                unlink(public_path('admin/img/customer/' . $profileImagePath));\n            }\n            $image = $request->file('profile_image');\n            $profileImageName = 'update_' . time() . '.' . $image->getClientOriginalExtension();\n            $image->move(public_path('admin/img/customer'), $profileImageName);\n            $profileImagePath = $profileImageName;\n        }\n\n        // Cập nhật thông tin khách hàng\n        $customer->full_name = $request['full_name'];\n        $customer->date_of_birth = $request['date_of_birth'];\n        $customer->gender = $request['gender'] ?? null;\n        $customer->phone = $request['phone'] ?? null;\n        $customer->address = $request['address'] ?? null;\n        $customer->profile_image = $profileImagePath;\n        $customer->software = $request['software'] ?? null;\n        $customer->website = $request['website'] ?? null;\n        $customer->company = $request['company'] ?? null;\n        $customer->email = $request['email'] ?? null;\n        $customer->tax_id = $request['tax_id'] ?? null;\n        $customer->status = $request['status'] ?? null;\n        $customer->update_at = now();\n        $customer->save();\n\n        // Gửi email thông báo\n        try {\n            Mail::to($customer->email)->send(new CustomerUpdated($customer));\n            return redirect()->route('customer.index')\n                ->with('success', 'Khách hàng đã được cập nhật thành công và email thông báo đã được gửi!');\n        } catch (\\Exception $e) {\n            return redirect()->route('customer.index')\n                ->with('error', 'Khách hàng đã được cập nhật, nhưng không thể gửi email. Lỗi: ' . $e->getMessage());\n        }\n    }\n\n    // Xóa khách hàng\n    public function destroy($customer_id)\n    {\n        // Tìm khách hàng dựa trên customer_id\n        $customer = Customer::findOrFail($customer_id);\n\n        // Kiểm tra và xóa ảnh đại diện nếu có\n        if ($customer->profile_image) {\n            $imagePath = public_path('admin/img/customer/' . $customer->profile_image);\n            if (file_exists($imagePath)) {\n                unlink($imagePath); // Xóa file khỏi thư mục\n            }\n        }\n\n        // Tìm và xóa người dùng liên kết với khách hàng qua user_id\n        if ($customer->user_id) {\n            $user = User::find($customer->user_id); // Tìm bản ghi trong bảng users\n            if ($user) {\n                $user->delete(); // Xóa người dùng\n            }\n        }\n\n        // Xóa khách hàng khỏi cơ sở dữ liệu\n        $customer->delete();\n\n        return redirect()->route('customer.index')\n            ->with('success', 'Khách hàng đã được xóa!');\n    }\n\n    public function store(Request $request)\n    {\n        $request->validate([\n            'email' => ['required', 'email', 'unique:customer,email'],\n        ], [\n            'email.unique' => 'Email đã tồn tại',\n        ]);\n\n        // Sinh các giá trị ngẫu nhiên như trước\n        $randomId = (string) Str::uuid();\n        $randuserID = (string) Str::uuid();\n        $username = 'user' . mt_rand(100000, 999999);\n\n        $password = $request->input('password_option') == 'manual'\n            ? $request->input('password')\n            : $this->generateRandomPassword(10);\n\n        // Xử lý lưu ảnh\n        $profileImageName = null;\n        if ($request->hasFile('profile_image')) {\n            $file = $request->file('profile_image');\n            $profileImageName = 'profile_' . time() . '.' . $file->getClientOriginalExtension();\n            $file->move(public_path('admin/img/customer'), $profileImageName);\n        }\n\n        // Tạo tài khoản User\n        $user = new User();\n        $user->user_id = $randuserID;\n        $user->username = $username;\n        $user->password = Hash::make($password);\n        $user->role_id = 3;\n        $user->save();\n\n        // Tạo khách hàng\n        $customer = new Customer();\n        $customer->customer_id = $randomId;\n        $customer->user_id = $randuserID;\n        $customer->full_name = $request['full_name'];\n        $customer->date_of_birth = $request['date_of_birth'] ?? null;\n        $customer->profile_image = $profileImageName;\n        $customer->gender = $request['gender'] ?? null;\n        $customer->phone = $request['phone'] ?? null;\n        $customer->address = $request['address'] ?? null;\n        $customer->email = $request['email'] ?? null;\n        $customer->software = $request['software'] ?? null;\n        $customer->website = $request['website'] ?? null;\n        $customer->company = $request['company'] ?? null;\n        $customer->tax_id = $request['tax_id'] ?? null;\n        $customer->create_at = now();\n        $customer->update_at = now();\n        $customer->save();\n\n        try {\n            Mail::to($request['email'])->send(new CustomerCreated($username, $password, $request['email']));\n            return redirect()->route('customer.index')\n                ->with('success', 'Thêm khách hàng thành công! Email đã được gửi.');\n        } catch (\\Exception $e) {\n            return redirect()->route('customer.index')\n                ->with('error', 'Khách hàng đã được thêm, nhưng không thể gửi email. Lỗi: ' . $e->getMessage());\n        }\n    }\n\n    //Duyệt tài khoản\n    public function approve($customer_id)\n    {\n        $customer = Customer::find($customer_id);\n\n        if ($customer) {\n            // Check status of the user\n            if ($customer->user->status === null) {\n                $customer->status = 'active';  // Mark account as approved\n                $customer->save();\n\n                // Update user status\n                $customer->user->status = 'active'; // Mark user as approved\n                $customer->user->save();\n\n                // Check if email is available\n                if (!empty($customer->email)) {\n                    // Send notification email\n                    Mail::to($customer->email)->send(new AccountApproved($customer));\n                } else {\n                    return redirect()->route('customer.index')->with('error', 'Email không hợp lệ.');\n                }\n\n                return redirect()->route('customer.index')->with([\n                    'success' => 'Tài khoản đã được duyệt và email thông báo đã được gửi!',\n                    'notification_duration' => 500 // thời gian hiển thị thông báo (ms)\n                ]);\n            } else {\n                return redirect()->route('customer.index')->with('error', 'Tài khoản không trong trạng thái cần duyệt');\n            }\n        }\n\n        return redirect()->route('customer.index')->with('error', 'Không tìm thấy khách hàng');\n    }\n\n    // Từ chối duyệt\n    public function reject($customer_id)\n    {\n        $customer = Customer::find($customer_id);\n\n        // Check if the customer exists\n        if ($customer) {\n            // Send notification email if email is available\n            if (!empty($customer->email)) {\n                Mail::to($customer->email)->send(new AccountRejected($customer));\n            }\n\n            // Get the associated user ID and delete the user\n            $userId = $customer->user_id; // Assuming you have a user_id field in the Customer model\n\n            // Delete the customer record\n            $customer->delete();\n\n            // Delete the associated user record from the User table\n            if ($userId) {\n                User::find($userId)->delete();\n            }\n\n            return redirect()->route('customer.index')->with([\n                'success' => 'Tài khoản đã bị từ chối và đã bị xóa!',\n                'notification_duration' => 500 // Duration for displaying the notification (ms)\n            ]);\n        } else {\n            return redirect()->route('customer.index')->with('error', 'Không tìm thấy khách hàng.');\n        }\n    }\n\n    public function pendingCustomers(Request $request)\n    {\n        $template = 'admin.customer.pending';\n        $logged_user = Employee::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n        // Xóa khách hàng không duyệt lâu hơn 30 ngày\n        Customer::whereNull('status')\n            ->where('create_at', '<', now()->subDays(2))\n            ->delete();\n\n        // Lấy các tham số tìm kiếm\n        $searchName = $request->input('name');\n        $searchDate = $request->input('date');\n\n        // Lọc khách hàng có status là null và lấy thông tin user liên quan\n        $customers = Customer::whereNull('status')\n            ->with('user')\n            ->when($searchName, function ($query) use ($searchName) {\n                return $query->where('full_name', 'LIKE', \"%$searchName%\");\n            })\n            ->when($searchDate, function ($query) use ($searchDate) {\n                return $query->whereDate('create_at', $searchDate);\n            })\n            ->paginate(4);\n\n        // Đếm số kết quả tìm kiếm\n        $totalResults = $customers->total();\n        $searchPerformed = $searchName || $searchDate;\n\n        $data = RequestController::getUnreadRequests();\n\n        // Lấy danh sách request và số lượng request chưa đọc\n        $unreadRequests = $data['unreadRequests'];\n        $unreadRequestCount = $data['unreadRequestCount'];\n\n        return view('admin.dashboard.layout', compact(\n            'template',\n            'logged_user',\n            'customers',\n            'searchPerformed',\n            'totalResults',\n            'searchName',\n            'searchDate',\n            'unreadRequests',\n            'unreadRequestCount'\n        ));\n    }\n\n    public function getUserList(Request $request)\n    {\n        $date = $request->input('date', now()->toDateString()); // Nếu không có ngày, sử dụng ngày hôm nay\n        $users = Customer::select('customer_id', 'full_name', 'status', 'create_at')\n            ->whereNull('status') // Chỉ lấy các tài khoản chưa được phê duyệt\n            ->whereDate('create_at', $date) // Lọc theo ngày\n            ->get();\n\n        return response()->json($users);\n    }\n}\n"
        }
    ]
}