{
    "sourceFile": "app/Http/Controllers/guest/UserController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1736157135920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736157145562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,268 @@\n+<?php\n+\n+namespace App\\Http\\Controllers\\guest;\n+\n+use App\\Http\\Controllers\\Controller;\n+use App\\Models\\Customer;\n+use App\\Models\\CustomerFeedback;\n+use App\\Models\\Employee;\n+use App\\Models\\EmployeeFeedback;\n+use Illuminate\\Http\\Request;\n+use Illuminate\\Support\\Facades\\Auth;\n+use Illuminate\\Support\\Facades\\Hash;\n+use App\\Models\\Request as SupportRequest;\n+use App\\Models\\SwitchedUser;\n+use App\\Models\\User;\n+use Illuminate\\Support\\Facades\\Cookie;\n+\n+class UserController extends Controller\n+{\n+    public function __construct() {}\n+\n+    public function index()\n+    {\n+        $template = 'guest.user.index';\n+        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+\n+        return view('guest.dashboard.layout', compact('template', 'logged_user'));\n+    }\n+\n+    public function getUserList()\n+    {\n+        $users = Customer::select('customer_id', 'full_name', 'status')\n+            ->whereNull('status') // Chỉ lấy các tài khoản chưa được phê duyệt\n+            ->get();\n+\n+        return response()->json($users);\n+    }\n+\n+    public function indexAccount()\n+    {\n+        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+        $accounts = Cookie::get('accounts', '[]');\n+        $accounts = is_string($accounts) ? json_decode($accounts, true) : $accounts;\n+        $accounts = $accounts ?: [];\n+\n+        // Lấy tài khoản hiện tại đã đăng nhập\n+        $loggedID = $logged_user->customer_id;\n+        // Loại bỏ tài khoản đang đăng nhập khỏi danh sách\n+        $accounts = collect($accounts)->reject(function ($account) use ($loggedID) {\n+            return $account['customer_id'] == $loggedID;\n+        })->values()->toArray();\n+\n+        if (!$logged_user) {\n+            return redirect()->route('homepage.index')->with('error', 'Không tìm thấy thông tin khách hàng.');\n+        }\n+\n+        // Lấy lịch sử yêu cầu của khách hàng\n+        $requests = SupportRequest::where('customer_id', $logged_user->customer_id)\n+            ->with(['requestType', 'attachment', 'history'])\n+            ->orderBy('create_at', 'desc')\n+            ->get();\n+\n+        return view('guest.account.index', compact('logged_user', 'accounts', 'requests'));\n+    }\n+\n+    public function updateProfile(Request $request)\n+    {\n+        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+\n+        // Kiểm tra nếu có hình ảnh được upload\n+        $profileImagePath = $logged_user->profile_image;\n+        if ($request->hasFile('profile_image')) {\n+            // Xóa ảnh cũ nếu có\n+            if ($profileImagePath && file_exists(public_path('admin/img/customer/' . $profileImagePath))) {\n+                unlink(public_path('admin/img/customer/' . $profileImagePath));\n+            }\n+\n+            // Lưu ảnh mới\n+            $image = $request->file('profile_image');\n+            if ($image->isValid()) {\n+                $imageName = 'update_' . time() . '.' . $image->getClientOriginalExtension();\n+                $profileImagePath = $imageName;  // Cập nhật đường dẫn ảnh mới\n+                $image->move(public_path('admin/img/customer/'), $imageName);  // Di chuyển ảnh mới vào thư mục\n+            }\n+\n+            // Lấy thông tin tài khoản từ cookie, nếu có\n+            $accounts = Cookie::get('accounts', []);\n+\n+            // Nếu tài khoản là chuỗi, giải mã JSON, nếu không thì $accounts đã là mảng\n+            $accounts = is_string($accounts) ? json_decode($accounts, true) : $accounts;\n+\n+            // Tìm và cập nhật mật khẩu của tài khoản trong mảng\n+            foreach ($accounts as &$account) {\n+                if ($account['customer_id'] == $logged_user->customer_id) {\n+                    $account['profile_image'] = $profileImagePath;\n+                    break;\n+                }\n+            }\n+\n+            Cookie::queue('accounts', json_encode($accounts), 60 * 24 * 30);  // Lưu trong 30 ngày\n+        }\n+\n+        // Cập nhật thông tin khách hàng\n+        $logged_user->full_name = $request['full_name'];\n+        $logged_user->date_of_birth = $request['date_of_birth'];\n+        $logged_user->gender = $request['gender'];\n+        $logged_user->phone = $request['phone'];\n+        $logged_user->address = $request['address'];\n+        $logged_user->profile_image = $profileImagePath;\n+        $logged_user->software = $request['software'];\n+        $logged_user->website = $request['website'];\n+        $logged_user->company = $request['company'];\n+        $logged_user->email = $request['email'];\n+        $logged_user->tax_id = $request['tax_id'];\n+        $logged_user->update_at = now();\n+        $logged_user->save();\n+\n+        $logged_user->user->username = $request['username'];\n+        $logged_user->user->save();\n+\n+        return redirect()->route('indexAccount')\n+            ->with('success', 'Hồ sơ khách hàng đã được cập nhật!');\n+    }\n+    public function checkUsernameCustomer($username)\n+    {\n+        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+        if ($username == $logged_user->user->username) {\n+            return response()->json(['exists' => false]);\n+        } else {\n+            $exists = User::where('username', $username)->exists();\n+\n+            return response()->json(['exists' => $exists]);\n+        }\n+    }\n+\n+    public function checkEmailCustomer($email)\n+    {\n+        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+        if ($email == $logged_user->email) {\n+            return response()->json(['exists' => false]);\n+        } else {\n+            // Kiểm tra email trong bảng employee và customer\n+            $employeeExists = Employee::where('email', $email)->exists();\n+            $customerExists = Customer::where('email', $email)->exists();\n+\n+            return response()->json([\n+                'exists' => $employeeExists || $customerExists,\n+            ]);\n+        }\n+    }\n+    public function changePass(Request $request)\n+    {\n+        $logged_user = Auth::user();\n+\n+        // Check if old password is correct\n+        if (!Hash::check($request->input('old-password'), $logged_user->password)) {\n+            return back()->withErrors(['old-password' => 'Mật khẩu cũ không đúng!'])->withInput();\n+        }\n+\n+        // Update the password\n+        $logged_user->password = Hash::make($request->input('new-password'));\n+        $logged_user->update_at = now();\n+        $logged_user->save();\n+\n+\n+        return redirect()->route('indexAccount')->with('success', 'Mật khẩu đã được thay đổi thành công!');\n+    }\n+\n+    public function switchAccount(Request $request, $username)\n+    {\n+        // Lấy thông tin tài khoản từ cookie\n+        $accounts = json_decode(Cookie::get('accounts', '[]'), true);\n+\n+        // Tìm tài khoản trong cookie\n+        $account = collect($accounts)->firstWhere('username', $username);\n+\n+        if ($account) {\n+            if (isset($account['password']) && !empty($account['password'])) {\n+                // Đăng nhập với mật khẩu từ cookie\n+                $credentials = [\n+                    'username' => $account['username'],\n+                    'password' => $account['password'],\n+                ];\n+\n+                if (Auth::attempt($credentials)) {\n+                    return redirect()->route('indexAccount')->with('success', \"Chào mừng {$account['full_name']} đến với trang khách hàng\");\n+                }\n+            } else {\n+                session(['login_username' => $account['username']]);\n+                // Nếu không có mật khẩu, chuyển hướng đến trang login\n+                return redirect()->route('login');\n+            }\n+        }\n+\n+        // Nếu không tìm thấy tài khoản, chuyển hướng về trang login\n+        return redirect()->route('login')->with('error', 'Không tìm thấy tài khoản');\n+    }\n+\n+    public function removeAccount($customer_id)\n+    {\n+        // Lấy danh sách tài khoản từ cookie\n+        $accounts = json_decode(Cookie::get('accounts', '[]'), true);\n+\n+        // Tìm và loại bỏ tài khoản cần xóa\n+        $accounts = collect($accounts)->reject(function ($account) use ($customer_id) {\n+            return $account['customer_id'] === $customer_id;\n+        })->values()->toArray();\n+\n+        // Cập nhật lại cookie với danh sách tài khoản đã xóa\n+        Cookie::queue('accounts', json_encode($accounts), 60 * 24 * 30); // Lưu cookie trong 30 ngày\n+\n+        // Quay lại trang chuyển đổi tài khoản\n+        return redirect()->route('indexAccount')->with('success', 'Tài khoản đã được xóa khỏi danh sách');\n+    }\n+\n+    public function reply(Request $request, $request_id)\n+    {\n+        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n+\n+        $customer_feedback = new CustomerFeedback();\n+        $customer_feedback->request_id = $request_id;\n+        $customer_feedback->customer_id = $logged_user->customer_id;\n+        $customer_feedback->message = $request->input('reply_content');\n+        $customer_feedback->Save();\n+\n+        return back()->with('success', 'Phản hồi đã được gửi thành công!');\n+    }\n+\n+    private function getFeedback($feedbackModel, $joinModel, $foreignKey, $request_id)\n+    {\n+        return $feedbackModel::select(\n+            \"{$feedbackModel->getTable()}.id\",\n+            \"{$feedbackModel->getTable()}.request_id\",\n+            \"{$joinModel->getTable()}.full_name\",\n+            \"{$joinModel->getTable()}.profile_image\",\n+            \"{$feedbackModel->getTable()}.message\",\n+            \"{$feedbackModel->getTable()}.created_at\",\n+            \"user.role_id\"\n+        )\n+            ->join($joinModel->getTable(), \"{$joinModel->getTable()}.{$foreignKey}\", '=', \"{$feedbackModel->getTable()}.{$foreignKey}\")\n+            ->join('user', 'user.user_id', '=', \"{$joinModel->getTable()}.user_id\")\n+            ->where(\"{$feedbackModel->getTable()}.request_id\", $request_id);\n+    }\n+\n+    public function getFeedbackByRequestId($request_id)\n+    {\n+        // Lấy feedback từ khách hàng\n+        $customerFeedbacks = $this->getFeedback(new CustomerFeedback(), new Customer(), 'customer_id', $request_id);\n+\n+        // Lấy feedback từ nhân viên\n+        $employeeFeedbacks = $this->getFeedback(new EmployeeFeedback(), new Employee(), 'employee_id', $request_id);\n+\n+        // Kết hợp feedback từ cả hai bảng\n+        $feedbacks = $customerFeedbacks\n+            ->unionAll($employeeFeedbacks->toBase())\n+            ->orderBy('created_at', 'asc')\n+            ->get();\n+\n+        $latestFeedback = EmployeeFeedback::firstWhere('is_read', false);\n+\n+        if ($latestFeedback) {\n+            $latestFeedback->is_read = true;\n+            $latestFeedback->save();\n+        }\n+\n+        return response()->json(['feedbacks' => $feedbacks]);\n+    }\n+}\n"
                }
            ],
            "date": 1736157135920,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\guest;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Customer;\nuse App\\Models\\CustomerFeedback;\nuse App\\Models\\Employee;\nuse App\\Models\\EmployeeFeedback;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Models\\Request as SupportRequest;\nuse App\\Models\\SwitchedUser;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Cookie;\n\nclass UserController extends Controller\n{\n    public function __construct() {}\n\n    public function index()\n    {\n        $template = 'guest.user.index';\n        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n        return view('guest.dashboard.layout', compact('template', 'logged_user'));\n    }\n\n    public function getUserList()\n    {\n        $users = Customer::select('customer_id', 'full_name', 'status')\n            ->whereNull('status') // Chỉ lấy các tài khoản chưa được phê duyệt\n            ->get();\n\n        return response()->json($users);\n    }\n\n    public function indexAccount()\n    {\n        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n        $accounts = Cookie::get('accounts', '[]');\n        $accounts = is_string($accounts) ? json_decode($accounts, true) : $accounts;\n        $accounts = $accounts ?: [];\n\n        // Lấy tài khoản hiện tại đã đăng nhập\n        $loggedID = $logged_user->customer_id;\n        // Loại bỏ tài khoản đang đăng nhập khỏi danh sách\n        $accounts = collect($accounts)->reject(function ($account) use ($loggedID) {\n            return $account['customer_id'] == $loggedID;\n        })->values()->toArray();\n\n        if (!$logged_user) {\n            return redirect()->route('homepage.index')->with('error', 'Không tìm thấy thông tin khách hàng.');\n        }\n\n        // Lấy lịch sử yêu cầu của khách hàng\n        $requests = SupportRequest::where('customer_id', $logged_user->customer_id)\n            ->with(['requestType', 'attachment', 'history'])\n            ->orderBy('create_at', 'desc')\n            ->get();\n\n        return view('guest.account.index', compact('logged_user', 'accounts', 'requests'));\n    }\n\n    public function updateProfile(Request $request)\n    {\n        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n        // Kiểm tra nếu có hình ảnh được upload\n        $profileImagePath = $logged_user->profile_image;\n        if ($request->hasFile('profile_image')) {\n            // Xóa ảnh cũ nếu có\n            if ($profileImagePath && file_exists(public_path('admin/img/customer/' . $profileImagePath))) {\n                unlink(public_path('admin/img/customer/' . $profileImagePath));\n            }\n\n            // Lưu ảnh mới\n            $image = $request->file('profile_image');\n            if ($image->isValid()) {\n                $imageName = 'update_' . time() . '.' . $image->getClientOriginalExtension();\n                $profileImagePath = $imageName;  // Cập nhật đường dẫn ảnh mới\n                $image->move(public_path('admin/img/customer/'), $imageName);  // Di chuyển ảnh mới vào thư mục\n            }\n\n            // Lấy thông tin tài khoản từ cookie, nếu có\n            $accounts = Cookie::get('accounts', []);\n\n            // Nếu tài khoản là chuỗi, giải mã JSON, nếu không thì $accounts đã là mảng\n            $accounts = is_string($accounts) ? json_decode($accounts, true) : $accounts;\n\n            // Tìm và cập nhật mật khẩu của tài khoản trong mảng\n            foreach ($accounts as &$account) {\n                if ($account['customer_id'] == $logged_user->customer_id) {\n                    $account['profile_image'] = $profileImagePath;\n                    break;\n                }\n            }\n\n            Cookie::queue('accounts', json_encode($accounts), 60 * 24 * 30);  // Lưu trong 30 ngày\n        }\n\n        // Cập nhật thông tin khách hàng\n        $logged_user->full_name = $request['full_name'];\n        $logged_user->date_of_birth = $request['date_of_birth'];\n        $logged_user->gender = $request['gender'];\n        $logged_user->phone = $request['phone'];\n        $logged_user->address = $request['address'];\n        $logged_user->profile_image = $profileImagePath;\n        $logged_user->software = $request['software'];\n        $logged_user->website = $request['website'];\n        $logged_user->company = $request['company'];\n        $logged_user->email = $request['email'];\n        $logged_user->tax_id = $request['tax_id'];\n        $logged_user->update_at = now();\n        $logged_user->save();\n\n        $logged_user->user->username = $request['username'];\n        $logged_user->user->save();\n\n        return redirect()->route('indexAccount')\n            ->with('success', 'Hồ sơ khách hàng đã được cập nhật!');\n    }\n    public function checkUsernameCustomer($username)\n    {\n        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n        if ($username == $logged_user->user->username) {\n            return response()->json(['exists' => false]);\n        } else {\n            $exists = User::where('username', $username)->exists();\n\n            return response()->json(['exists' => $exists]);\n        }\n    }\n\n    public function checkEmailCustomer($email)\n    {\n        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n        if ($email == $logged_user->email) {\n            return response()->json(['exists' => false]);\n        } else {\n            // Kiểm tra email trong bảng employee và customer\n            $employeeExists = Employee::where('email', $email)->exists();\n            $customerExists = Customer::where('email', $email)->exists();\n\n            return response()->json([\n                'exists' => $employeeExists || $customerExists,\n            ]);\n        }\n    }\n    public function changePass(Request $request)\n    {\n        $logged_user = Auth::user();\n\n        // Check if old password is correct\n        if (!Hash::check($request->input('old-password'), $logged_user->password)) {\n            return back()->withErrors(['old-password' => 'Mật khẩu cũ không đúng!'])->withInput();\n        }\n\n        // Update the password\n        $logged_user->password = Hash::make($request->input('new-password'));\n        $logged_user->update_at = now();\n        $logged_user->save();\n\n\n        return redirect()->route('indexAccount')->with('success', 'Mật khẩu đã được thay đổi thành công!');\n    }\n\n    public function switchAccount(Request $request, $username)\n    {\n        // Lấy thông tin tài khoản từ cookie\n        $accounts = json_decode(Cookie::get('accounts', '[]'), true);\n\n        // Tìm tài khoản trong cookie\n        $account = collect($accounts)->firstWhere('username', $username);\n\n        if ($account) {\n            if (isset($account['password']) && !empty($account['password'])) {\n                // Đăng nhập với mật khẩu từ cookie\n                $credentials = [\n                    'username' => $account['username'],\n                    'password' => $account['password'],\n                ];\n\n                if (Auth::attempt($credentials)) {\n                    return redirect()->route('indexAccount')->with('success', \"Chào mừng {$account['full_name']} đến với trang khách hàng\");\n                }\n            } else {\n                session(['login_username' => $account['username']]);\n                // Nếu không có mật khẩu, chuyển hướng đến trang login\n                return redirect()->route('login');\n            }\n        }\n\n        // Nếu không tìm thấy tài khoản, chuyển hướng về trang login\n        return redirect()->route('login')->with('error', 'Không tìm thấy tài khoản');\n    }\n\n    public function removeAccount($customer_id)\n    {\n        // Lấy danh sách tài khoản từ cookie\n        $accounts = json_decode(Cookie::get('accounts', '[]'), true);\n\n        // Tìm và loại bỏ tài khoản cần xóa\n        $accounts = collect($accounts)->reject(function ($account) use ($customer_id) {\n            return $account['customer_id'] === $customer_id;\n        })->values()->toArray();\n\n        // Cập nhật lại cookie với danh sách tài khoản đã xóa\n        Cookie::queue('accounts', json_encode($accounts), 60 * 24 * 30); // Lưu cookie trong 30 ngày\n\n        // Quay lại trang chuyển đổi tài khoản\n        return redirect()->route('indexAccount')->with('success', 'Tài khoản đã được xóa khỏi danh sách');\n    }\n\n    public function reply(Request $request, $request_id)\n    {\n        $logged_user = Customer::with('user')->where('user_id', '=', Auth::user()->user_id)->first();\n\n        $customer_feedback = new CustomerFeedback();\n        $customer_feedback->request_id = $request_id;\n        $customer_feedback->customer_id = $logged_user->customer_id;\n        $customer_feedback->message = $request->input('reply_content');\n        $customer_feedback->Save();\n\n        return back()->with('success', 'Phản hồi đã được gửi thành công!');\n    }\n\n    private function getFeedback($feedbackModel, $joinModel, $foreignKey, $request_id)\n    {\n        return $feedbackModel::select(\n            \"{$feedbackModel->getTable()}.id\",\n            \"{$feedbackModel->getTable()}.request_id\",\n            \"{$joinModel->getTable()}.full_name\",\n            \"{$joinModel->getTable()}.profile_image\",\n            \"{$feedbackModel->getTable()}.message\",\n            \"{$feedbackModel->getTable()}.created_at\",\n            \"user.role_id\"\n        )\n            ->join($joinModel->getTable(), \"{$joinModel->getTable()}.{$foreignKey}\", '=', \"{$feedbackModel->getTable()}.{$foreignKey}\")\n            ->join('user', 'user.user_id', '=', \"{$joinModel->getTable()}.user_id\")\n            ->where(\"{$feedbackModel->getTable()}.request_id\", $request_id);\n    }\n\n    public function getFeedbackByRequestId($request_id)\n    {\n        // Lấy feedback từ khách hàng\n        $customerFeedbacks = $this->getFeedback(new CustomerFeedback(), new Customer(), 'customer_id', $request_id);\n\n        // Lấy feedback từ nhân viên\n        $employeeFeedbacks = $this->getFeedback(new EmployeeFeedback(), new Employee(), 'employee_id', $request_id);\n\n        // Kết hợp feedback từ cả hai bảng\n        $feedbacks = $customerFeedbacks\n            ->unionAll($employeeFeedbacks->toBase())\n            ->orderBy('created_at', 'ASC')\n            ->get();\n\n        $latestFeedback = EmployeeFeedback::firstWhere('is_read', false);\n\n        if ($latestFeedback) {\n            $latestFeedback->is_read = true;\n            $latestFeedback->save();\n        }\n\n        return response()->json(['feedbacks' => $feedbacks]);\n    }\n}\n"
        }
    ]
}